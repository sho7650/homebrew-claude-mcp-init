#!/bin/bash

# MCP Starter Script - Bash Version
# Configures Serena and Cipher MCP servers for Claude Code

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    echo -e "${2}${1}${NC}"
}

# Function to check prerequisites
check_prerequisites() {
    local missing_deps=()
    
    # Check for required commands
    command -v node >/dev/null 2>&1 || missing_deps+=("node")
    command -v npm >/dev/null 2>&1 || missing_deps+=("npm")
    command -v python3 >/dev/null 2>&1 || missing_deps+=("python3")
    command -v uv >/dev/null 2>&1 || missing_deps+=("uv")
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_color "Error: Missing required dependencies: ${missing_deps[*]}" "$RED"
        print_color "Please install the missing dependencies and try again." "$YELLOW"
        exit 1
    fi
}

# Function to create project structure
create_project_structure() {
    local project_name=$1
    local project_path="$(pwd)/${project_name}"
    
    if [ -d "$project_path" ]; then
        print_color "Warning: Project directory already exists: $project_path" "$YELLOW"
        read -p "Do you want to continue? (y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_color "Aborted." "$RED"
            exit 1
        fi
    else
        mkdir -p "$project_path"
    fi
    
    # Create required directories
    mkdir -p "${project_path}/.serena"
    mkdir -p "${project_path}/memAgent"
    
    echo "$project_path"
}

# Function to create Serena configuration
create_serena_config() {
    local project_path=$1
    local language=$2
    local config_file="${project_path}/.serena/project.yml"
    
    cat > "$config_file" << EOF
# Serena Project Configuration
# Generated by mcp-starter script

name: $(basename "$project_path")
language: ${language}
version: 1.0.0

# Project settings
settings:
  read_only: false
  auto_index: true
  enable_shell: true

# Language-specific settings
language_settings:
  primary_language: ${language}
  type_checking: true
  linting: true

# Tools configuration
tools:
  excluded_tools: []
  
# Memory settings
memories:
  enabled: true
  auto_save: true

# Context and modes
default_context: claude-code
default_modes:
  - interactive
  - editing

# Project metadata
metadata:
  created_at: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
  created_by: mcp-starter
EOF
    
    print_color "Created Serena configuration: $config_file" "$GREEN"
}

# Function to create Cipher configuration
create_cipher_config() {
    local project_path=$1
    local config_file="${project_path}/memAgent/cipher.yml"
    
    cat > "$config_file" << EOF
# Cipher Memory Agent Configuration
# Generated by mcp-starter script

# LLM Configuration
llm:
  provider: openai
  model: gpt-4-turbo
  apiKey: \$OPENAI_API_KEY
  temperature: 0.7
  maxTokens: 4096

# Embedding Configuration
embedding:
  provider: openai
  model: text-embedding-3-small
  apiKey: \$OPENAI_API_KEY
  dimensions: 1536

# System Prompt
systemPrompt: |
  You are an intelligent coding assistant with persistent memory capabilities.
  You help developers with code analysis, debugging, and implementation tasks.
  You maintain context across sessions and learn from previous interactions.

# Memory Configuration
memory:
  enabled: true
  type: persistent
  storage:
    type: local
    path: ./memory_store
  
# Vector Store Configuration
vectorStore:
  type: in-memory
  collection: project_memories

# Session Configuration
session:
  persistent: true
  autoSave: true
  saveInterval: 300 # seconds

# Tool Configuration
tools:
  enabled: true
  allowedTools:
    - cipher_memory_search
    - cipher_extract_and_operate_memory
    - cipher_add_memory
    - cipher_update_memory
    - cipher_delete_memory

# MCP Server Settings
mcp:
  mode: stdio
  strict: false
  timeout: 30000 # milliseconds

# Logging
logging:
  level: info
  file: ./logs/cipher.log
EOF
    
    print_color "Created Cipher configuration: $config_file" "$GREEN"
}

# Function to create .env file
create_env_file() {
    local project_path=$1
    local env_file="${project_path}/.env"
    
    if [ -f "$env_file" ]; then
        print_color "Warning: .env file already exists" "$YELLOW"
        return
    fi
    
    cat > "$env_file" << 'EOF'
# Environment Variables for MCP Servers
# Generated by mcp-starter script

# OpenAI Configuration (Required for Cipher)
OPENAI_API_KEY=your-openai-api-key-here

# Optional: Additional API Keys
# ANTHROPIC_API_KEY=your-anthropic-api-key
# VOYAGE_API_KEY=your-voyage-api-key

# Cipher Configuration
CIPHER_LOG_LEVEL=info
NODE_ENV=development

# Vector Store Configuration (Optional)
# VECTOR_STORE_TYPE=qdrant
# VECTOR_STORE_URL=http://localhost:6333
# VECTOR_STORE_API_KEY=your-qdrant-api-key

# Workspace Memory (Optional)
USE_WORKSPACE_MEMORY=true
WORKSPACE_VECTOR_STORE_COLLECTION=workspace_memory
EOF
    
    print_color "Created .env file: $env_file" "$GREEN"
    print_color "IMPORTANT: Please update the OPENAI_API_KEY in the .env file" "$YELLOW"
}

# Function to generate Claude Code MCP configuration
generate_claude_config() {
    local project_path=$1
    local language=$2
    local config_file="${project_path}/claude-mcp-config.json"
    
    cat > "$config_file" << EOF
{
  "mcpServers": {
    "serena": {
      "command": "uvx",
      "args": [
        "--from",
        "git+https://github.com/oraios/serena",
        "serena-mcp-server",
        "--context",
        "claude-code",
        "--project",
        "${project_path}",
        "--language",
        "${language}"
      ]
    },
    "cipher": {
      "type": "stdio",
      "command": "cipher",
      "args": [
        "--mode",
        "mcp",
        "--agent",
        "${project_path}/memAgent/cipher.yml"
      ],
      "env": {
        "OPENAI_API_KEY": "\${OPENAI_API_KEY}"
      }
    }
  }
}
EOF
    
    print_color "Generated Claude Code MCP configuration: $config_file" "$GREEN"
}

# Function to create setup instructions
create_setup_instructions() {
    local project_path=$1
    local instructions_file="${project_path}/MCP_SETUP_INSTRUCTIONS.md"
    
    cat > "$instructions_file" << 'EOF'
# MCP Server Setup Instructions

## Prerequisites Checklist

1. **Environment Variables**
   - [ ] Update `OPENAI_API_KEY` in `.env` file

2. **Install Dependencies**
   ```bash
   # Install Cipher globally
   npm install -g @byterover/cipher
   
   # Install uv (Python package manager) if not already installed
   curl -LsSf https://astral.sh/uv/install.sh | sh
   ```

## Claude Code Configuration

1. **Add MCP servers to Claude Code**:
   ```bash
   # From the project directory, run:
   claude mcp add serena -- uvx --from git+https://github.com/oraios/serena serena-mcp-server --context claude-code --project $(pwd)
   claude mcp add cipher -- cipher --mode mcp --agent $(pwd)/memAgent/cipher.yml
   ```

2. **Start Claude Code**:
   ```bash
   claude
   ```

3. **Initialize Serena** (in Claude Code chat):
   ```
   /mcp__serena__initial_instructions
   ```

## Manual Configuration (Alternative)

If automatic configuration doesn't work, manually add to Claude Code's MCP configuration:

1. Run `claude mcp edit` to open the configuration file
2. Copy the contents from `claude-mcp-config.json` to the configuration

## Verification

1. Check that both MCP servers are running:
   - Look for the hammer icon in Claude Code
   - Available tools should include both Serena and Cipher tools

2. Test Serena:
   ```
   "Show me the project structure"
   ```

3. Test Cipher:
   ```
   "Remember that this project uses [your framework/language]"
   ```

## Troubleshooting

- **Serena not responding**: Check if language servers are installed for your chosen language
- **Cipher memory errors**: Verify OPENAI_API_KEY is set correctly
- **Connection issues**: Restart Claude Code and check logs

## Additional Resources

- [Serena Documentation](https://github.com/oraios/serena)
- [Cipher Documentation](https://github.com/campfirein/cipher)
- [Claude Code MCP Docs](https://docs.anthropic.com/claude-code/mcp)
EOF
    
    print_color "Created setup instructions: $instructions_file" "$GREEN"
}

# Main function
main() {
    print_color "MCP Starter - Bash Version" "$BLUE"
    print_color "============================" "$BLUE"
    
    # Check arguments
    if [ $# -lt 1 ]; then
        print_color "Usage: $0 <project_name> [language]" "$RED"
        print_color "Example: $0 my-project typescript" "$YELLOW"
        exit 1
    fi
    
    local project_name=$1
    local language=${2:-typescript}
    
    # Validate language
    local valid_languages=("typescript" "javascript" "python" "java" "go" "rust" "php" "elixir" "clojure" "c" "cpp")
    if [[ ! " ${valid_languages[@]} " =~ " ${language} " ]]; then
        print_color "Warning: Unsupported language '${language}'. Using 'typescript' instead." "$YELLOW"
        language="typescript"
    fi
    
    print_color "Project: $project_name" "$GREEN"
    print_color "Language: $language" "$GREEN"
    echo
    
    # Check prerequisites
    print_color "Checking prerequisites..." "$BLUE"
    check_prerequisites
    
    # Create project structure
    print_color "Creating project structure..." "$BLUE"
    project_path=$(create_project_structure "$project_name")
    
    # Create configuration files
    print_color "Creating configuration files..." "$BLUE"
    create_serena_config "$project_path" "$language"
    create_cipher_config "$project_path"
    create_env_file "$project_path"
    generate_claude_config "$project_path" "$language"
    create_setup_instructions "$project_path"
    
    echo
    print_color "âœ… MCP server configuration completed successfully!" "$GREEN"
    echo
    print_color "Next steps:" "$BLUE"
    print_color "1. Navigate to project: cd $project_name" "$YELLOW"
    print_color "2. Update OPENAI_API_KEY in .env file" "$YELLOW"
    print_color "3. Follow instructions in MCP_SETUP_INSTRUCTIONS.md" "$YELLOW"
    echo
    print_color "Happy coding with Claude Code + Serena + Cipher! ðŸš€" "$BLUE"
}

# Run main function
main "$@"