#!/usr/bin/env fish

# MCP Starter Script - Fish Version
# Configures Serena and Cipher MCP servers for Claude Code

# Color functions
function print_color
    set_color $argv[2]
    echo $argv[1]
    set_color normal
end

# Function to check prerequisites
function check_prerequisites
    set missing_deps
    
    for cmd in node npm python3 uv
        if not command -v $cmd >/dev/null 2>&1
            set -a missing_deps $cmd
        end
    end
    
    if test (count $missing_deps) -gt 0
        print_color "Error: Missing required dependencies: $missing_deps" red
        print_color "Please install the missing dependencies and try again." yellow
        exit 1
    end
end

# Function to create project structure
function create_project_structure
    set project_name $argv[1]
    set project_path (pwd)/$project_name
    
    if test -d $project_path
        print_color "Warning: Project directory already exists: $project_path" yellow
        read -P "Do you want to continue? (y/n): " -n 1 reply
        echo
        if not string match -q -i "y" $reply
            print_color "Aborted." red
            exit 1
        end
    else
        mkdir -p $project_path
    end
    
    # Create required directories
    mkdir -p $project_path/.serena
    mkdir -p $project_path/memAgent
    
    echo $project_path
end

# Function to create Serena configuration
function create_serena_config
    set project_path $argv[1]
    set language $argv[2]
    set config_file $project_path/.serena/project.yml
    
    echo "# Serena Project Configuration
# Generated by claude-mcp-init script

name: "(basename $project_path)"
language: $language
version: __VERSION__

# Project settings
settings:
  read_only: false
  auto_index: true
  enable_shell: true

# Language-specific settings
language_settings:
  primary_language: $language
  type_checking: true
  linting: true

# Tools configuration
tools:
  excluded_tools: []
  
# Memory settings
memories:
  enabled: true
  auto_save: true

# Context and modes
default_context: claude-code
default_modes:
  - interactive
  - editing

# Project metadata
metadata:
  created_at: "(date -u +"%Y-%m-%dT%H:%M:%SZ")"
  created_by: claude-mcp-init" > $config_file
    
    print_color "Created Serena configuration: $config_file" green
end

# Function to create Cipher configuration
function create_cipher_config
    set project_path $argv[1]
    set config_file $project_path/memAgent/cipher.yml
    
    echo '# Cipher Memory Agent Configuration
# Generated by claude-mcp-init script

# LLM Configuration
llm:
  provider: openai
  model: gpt-4-turbo
  apiKey: $OPENAI_API_KEY
  temperature: 0.7
  maxTokens: 4096

# Embedding Configuration
embedding:
  provider: openai
  model: text-embedding-3-small
  apiKey: $OPENAI_API_KEY
  dimensions: 1536

# System Prompt
systemPrompt: |
  You are an intelligent coding assistant with persistent memory capabilities.
  You help developers with code analysis, debugging, and implementation tasks.
  You maintain context across sessions and learn from previous interactions.

# Memory Configuration
memory:
  enabled: true
  type: persistent
  storage:
    type: local
    path: ./memory_store
  
# Vector Store Configuration
vectorStore:
  type: in-memory
  collection: project_memories

# Session Configuration
session:
  persistent: true
  autoSave: true
  saveInterval: 300 # seconds

# Tool Configuration
tools:
  enabled: true
  allowedTools:
    - cipher_memory_search
    - cipher_extract_and_operate_memory
    - cipher_add_memory
    - cipher_update_memory
    - cipher_delete_memory

# MCP Server Settings
mcp:
  mode: stdio
  strict: false
  timeout: 30000 # milliseconds

# Logging
logging:
  level: info
  file: ./logs/cipher.log' > $config_file
    
    print_color "Created Cipher configuration: $config_file" green
end

# Function to create .env file
function create_env_file
    set project_path $argv[1]
    set env_file $project_path/.env
    
    if test -f $env_file
        print_color "Warning: .env file already exists" yellow
        return
    end
    
    echo '# Environment Variables for MCP Servers
# Generated by claude-mcp-init script

# OpenAI Configuration (Required for Cipher)
OPENAI_API_KEY=your-openai-api-key-here

# Optional: Additional API Keys
# ANTHROPIC_API_KEY=your-anthropic-api-key
# VOYAGE_API_KEY=your-voyage-api-key

# Cipher Configuration
CIPHER_LOG_LEVEL=info
NODE_ENV=development

# Vector Store Configuration (Optional)
# VECTOR_STORE_TYPE=qdrant
# VECTOR_STORE_URL=http://localhost:6333
# VECTOR_STORE_API_KEY=your-qdrant-api-key

# Workspace Memory (Optional)
USE_WORKSPACE_MEMORY=true
WORKSPACE_VECTOR_STORE_COLLECTION=workspace_memory' > $env_file
    
    print_color "Created .env file: $env_file" green
    print_color "IMPORTANT: Please update the OPENAI_API_KEY in the .env file" yellow
end

# Function to generate Claude Code MCP configuration
function generate_claude_config
    set project_path $argv[1]
    set language $argv[2]
    set config_file $project_path/claude-mcp-config.json
    
    echo '{
  "mcpServers": {
    "serena": {
      "command": "uvx",
      "args": [
        "--from",
        "git+https://github.com/oraios/serena",
        "serena-mcp-server",
        "--context",
        "claude-code",
        "--project",
        "'$project_path'",
        "--language",
        "'$language'"
      ]
    },
    "cipher": {
      "type": "stdio",
      "command": "cipher",
      "args": [
        "--mode",
        "mcp",
        "--agent",
        "'$project_path'/memAgent/cipher.yml"
      ],
      "env": {
        "OPENAI_API_KEY": "${OPENAI_API_KEY}"
      }
    }
  }
}' > $config_file
    
    print_color "Generated Claude Code MCP configuration: $config_file" green
end

# Function to create setup instructions
function create_setup_instructions
    set project_path $argv[1]
    set instructions_file $project_path/MCP_SETUP_INSTRUCTIONS.md
    
    echo '# MCP Server Setup Instructions

## Prerequisites Checklist

1. **Environment Variables**
   - [ ] Update `OPENAI_API_KEY` in `.env` file

2. **Install Dependencies**
   ```bash
   # Install Cipher globally
   npm install -g @byterover/cipher
   
   # Install uv (Python package manager) if not already installed
   curl -LsSf https://astral.sh/uv/install.sh | sh
   ```

## Claude Code Configuration

1. **Add MCP servers to Claude Code**:
   ```bash
   # From the project directory, run:
   claude mcp add serena -- uvx --from git+https://github.com/oraios/serena serena-mcp-server --context claude-code --project $(pwd)
   claude mcp add cipher -- cipher --mode mcp --agent $(pwd)/memAgent/cipher.yml
   ```

2. **Start Claude Code**:
   ```bash
   claude
   ```

3. **Initialize Serena** (in Claude Code chat):
   ```
   /mcp__serena__initial_instructions
   ```

## Verification

1. Check that both MCP servers are running
2. Test both Serena and Cipher functionality

## Troubleshooting

- Check language server installation for Serena
- Verify OPENAI_API_KEY for Cipher
- Restart Claude Code if needed' > $instructions_file
    
    print_color "Created setup instructions: $instructions_file" green
end

# Main function
function main
    print_color "MCP Starter - Fish Version" blue
    print_color "============================" blue
    
    # Check arguments
    if test (count $argv) -lt 1
        print_color "Usage: claude-mcp-init.fish <project_name> [language]" red
        print_color "Example: claude-mcp-init.fish my-project typescript" yellow
        exit 1
    end
    
    set project_name $argv[1]
    set language typescript
    if test (count $argv) -ge 2
        set language $argv[2]
    end
    
    # Validate language
    set valid_languages typescript javascript python java go rust php elixir clojure c cpp
    if not contains $language $valid_languages
        print_color "Warning: Unsupported language '$language'. Using 'typescript' instead." yellow
        set language typescript
    end
    
    print_color "Project: $project_name" green
    print_color "Language: $language" green
    echo
    
    # Check prerequisites
    print_color "Checking prerequisites..." blue
    check_prerequisites
    
    # Create project structure
    print_color "Creating project structure..." blue
    set project_path (create_project_structure $project_name)
    
    # Create configuration files
    print_color "Creating configuration files..." blue
    create_serena_config $project_path $language
    create_cipher_config $project_path
    create_env_file $project_path
    generate_claude_config $project_path $language
    create_setup_instructions $project_path
    
    echo
    print_color "âœ… MCP server configuration completed successfully!" green
    echo
    print_color "Next steps:" blue
    print_color "1. Navigate to project: cd $project_name" yellow
    print_color "2. Update OPENAI_API_KEY in .env file" yellow
    print_color "3. Follow instructions in MCP_SETUP_INSTRUCTIONS.md" yellow
    echo
    print_color "Happy coding with Claude Code + Serena + Cipher! ðŸš€" blue
end

# Run main function
main $argv