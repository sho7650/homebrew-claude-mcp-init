# MCP Starter Script - PowerShell Version
# Configures Serena and Cipher MCP servers for Claude Code

param(
    [Parameter(Mandatory=$true)]
    [string]$ProjectName,
    
    [Parameter(Mandatory=$false)]
    [string]$Language = "typescript"
)

# Color output function
function Write-ColorOutput {
    param([string]$Message, [ConsoleColor]$Color)
    Write-Host $Message -ForegroundColor $Color
}

# Check prerequisites
function Test-Prerequisites {
    $missingDeps = @()
    
    @("node", "npm", "python3", "uv") | ForEach-Object {
        if (-not (Get-Command $_ -ErrorAction SilentlyContinue)) {
            $missingDeps += $_
        }
    }
    
    if ($missingDeps.Count -gt 0) {
        Write-ColorOutput "Error: Missing dependencies: $($missingDeps -join ', ')" Red
        Write-ColorOutput "Please install the missing dependencies and try again." Yellow
        exit 1
    }
}

# Create project structure
function New-ProjectStructure {
    param([string]$ProjectName)
    
    $projectPath = Join-Path (Get-Location) $ProjectName
    
    if (Test-Path $projectPath) {
        Write-ColorOutput "Warning: Project directory already exists: $projectPath" Yellow
        $reply = Read-Host "Do you want to continue? (y/n)"
        if ($reply -ne 'y') {
            Write-ColorOutput "Aborted." Red
            exit 1
        }
    }
    
    New-Item -ItemType Directory -Force -Path $projectPath | Out-Null
    New-Item -ItemType Directory -Force -Path "$projectPath\.serena" | Out-Null
    New-Item -ItemType Directory -Force -Path "$projectPath\memAgent" | Out-Null
    
    return $projectPath
}

# Create Serena configuration
function New-SerenaConfig {
    param([string]$ProjectPath, [string]$Language)
    
    $configFile = Join-Path $ProjectPath ".serena\project.yml"
    $projectName = Split-Path $ProjectPath -Leaf
    $createdAt = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
    
    $config = @"
# Serena Project Configuration
# Generated by mcp-starter script

name: $projectName
language: $Language
version: 1.0.0

# Project settings
settings:
  read_only: false
  auto_index: true
  enable_shell: true

# Language-specific settings
language_settings:
  primary_language: $Language
  type_checking: true
  linting: true

# Tools configuration
tools:
  excluded_tools: []
  
# Memory settings
memories:
  enabled: true
  auto_save: true

# Context and modes
default_context: claude-code
default_modes:
  - interactive
  - editing

# Project metadata
metadata:
  created_at: $createdAt
  created_by: mcp-starter
"@
    
    Set-Content -Path $configFile -Value $config
    Write-ColorOutput "Created Serena configuration: $configFile" Green
}

# Create Cipher configuration
function New-CipherConfig {
    param([string]$ProjectPath)
    
    $configFile = Join-Path $ProjectPath "memAgent\cipher.yml"
    
    $config = @'
# Cipher Memory Agent Configuration
# Generated by mcp-starter script

# LLM Configuration
llm:
  provider: openai
  model: gpt-4-turbo
  apiKey: $OPENAI_API_KEY
  temperature: 0.7
  maxTokens: 4096

# Embedding Configuration
embedding:
  provider: openai
  model: text-embedding-3-small
  apiKey: $OPENAI_API_KEY
  dimensions: 1536

# System Prompt
systemPrompt: |
  You are an intelligent coding assistant with persistent memory capabilities.
  You help developers with code analysis, debugging, and implementation tasks.
  You maintain context across sessions and learn from previous interactions.

# Memory Configuration
memory:
  enabled: true
  type: persistent
  storage:
    type: local
    path: ./memory_store
  
# Vector Store Configuration
vectorStore:
  type: in-memory
  collection: project_memories

# Session Configuration
session:
  persistent: true
  autoSave: true
  saveInterval: 300 # seconds

# Tool Configuration
tools:
  enabled: true
  allowedTools:
    - cipher_memory_search
    - cipher_extract_and_operate_memory
    - cipher_add_memory
    - cipher_update_memory
    - cipher_delete_memory

# MCP Server Settings
mcp:
  mode: stdio
  strict: false
  timeout: 30000 # milliseconds

# Logging
logging:
  level: info
  file: ./logs/cipher.log
'@
    
    Set-Content -Path $configFile -Value $config
    Write-ColorOutput "Created Cipher configuration: $configFile" Green
}

# Create .env file
function New-EnvFile {
    param([string]$ProjectPath)
    
    $envFile = Join-Path $ProjectPath ".env"
    
    if (Test-Path $envFile) {
        Write-ColorOutput "Warning: .env file already exists" Yellow
        return
    }
    
    $envContent = @'
# Environment Variables for MCP Servers
# Generated by mcp-starter script

# OpenAI Configuration (Required for Cipher)
OPENAI_API_KEY=your-openai-api-key-here

# Optional: Additional API Keys
# ANTHROPIC_API_KEY=your-anthropic-api-key
# VOYAGE_API_KEY=your-voyage-api-key

# Cipher Configuration
CIPHER_LOG_LEVEL=info
NODE_ENV=development

# Vector Store Configuration (Optional)
# VECTOR_STORE_TYPE=qdrant
# VECTOR_STORE_URL=http://localhost:6333
# VECTOR_STORE_API_KEY=your-qdrant-api-key

# Workspace Memory (Optional)
USE_WORKSPACE_MEMORY=true
WORKSPACE_VECTOR_STORE_COLLECTION=workspace_memory
'@
    
    Set-Content -Path $envFile -Value $envContent
    Write-ColorOutput "Created .env file: $envFile" Green
    Write-ColorOutput "IMPORTANT: Please update the OPENAI_API_KEY in the .env file" Yellow
}

# Generate Claude Code MCP configuration
function New-ClaudeConfig {
    param([string]$ProjectPath, [string]$Language)
    
    $configFile = Join-Path $ProjectPath "claude-mcp-config.json"
    
    $config = @"
{
  "mcpServers": {
    "serena": {
      "command": "uvx",
      "args": [
        "--from",
        "git+https://github.com/oraios/serena",
        "serena-mcp-server",
        "--context",
        "claude-code",
        "--project",
        "$($ProjectPath.Replace('\', '/'))",
        "--language",
        "$Language"
      ]
    },
    "cipher": {
      "type": "stdio",
      "command": "cipher",
      "args": [
        "--mode",
        "mcp",
        "--agent",
        "$($ProjectPath.Replace('\', '/'))/memAgent/cipher.yml"
      ],
      "env": {
        "OPENAI_API_KEY": "`${OPENAI_API_KEY}"
      }
    }
  }
}
"@
    
    Set-Content -Path $configFile -Value $config
    Write-ColorOutput "Generated Claude Code MCP configuration: $configFile" Green
}

# Create setup instructions
function New-SetupInstructions {
    param([string]$ProjectPath)
    
    $instructionsFile = Join-Path $ProjectPath "MCP_SETUP_INSTRUCTIONS.md"
    
    $instructions = @'
# MCP Server Setup Instructions

## Prerequisites Checklist

1. **Environment Variables**
   - [ ] Update `OPENAI_API_KEY` in `.env` file

2. **Install Dependencies**
   ```bash
   # Install Cipher globally
   npm install -g @byterover/cipher
   
   # Install uv (Python package manager) if not already installed
   curl -LsSf https://astral.sh/uv/install.sh | sh
   ```

## Claude Code Configuration

1. **Add MCP servers to Claude Code**:
   ```bash
   # From the project directory, run:
   claude mcp add serena -- uvx --from git+https://github.com/oraios/serena serena-mcp-server --context claude-code --project $(pwd)
   claude mcp add cipher -- cipher --mode mcp --agent $(pwd)/memAgent/cipher.yml
   ```

2. **Start Claude Code**:
   ```bash
   claude
   ```

3. **Initialize Serena** (in Claude Code chat):
   ```
   /mcp__serena__initial_instructions
   ```

## Manual Configuration (Alternative)

If automatic configuration doesn't work, manually add to Claude Code's MCP configuration:

1. Run `claude mcp edit` to open the configuration file
2. Copy the contents from `claude-mcp-config.json` to the configuration

## Verification

1. Check that both MCP servers are running:
   - Look for the hammer icon in Claude Code
   - Available tools should include both Serena and Cipher tools

2. Test Serena:
   ```
   "Show me the project structure"
   ```

3. Test Cipher:
   ```
   "Remember that this project uses [your framework/language]"
   ```

## Troubleshooting

- **Serena not responding**: Check if language servers are installed for your chosen language
- **Cipher memory errors**: Verify OPENAI_API_KEY is set correctly
- **Connection issues**: Restart Claude Code and check logs

## Additional Resources

- [Serena Documentation](https://github.com/oraios/serena)
- [Cipher Documentation](https://github.com/campfirein/cipher)
- [Claude Code MCP Docs](https://docs.anthropic.com/claude-code/mcp)
'@
    
    Set-Content -Path $instructionsFile -Value $instructions
    Write-ColorOutput "Created setup instructions: $instructionsFile" Green
}

# Main execution
Write-ColorOutput "MCP Starter - PowerShell Version" Blue
Write-ColorOutput "=================================" Blue

# Validate language
$validLanguages = @("typescript", "javascript", "python", "java", "go", "rust", "php", "elixir", "clojure", "c", "cpp")
if ($Language -notin $validLanguages) {
    Write-ColorOutput "Warning: Unsupported language '$Language'. Using 'typescript' instead." Yellow
    $Language = "typescript"
}

Write-ColorOutput "Project: $ProjectName" Green
Write-ColorOutput "Language: $Language" Green
Write-Host

# Check prerequisites
Write-ColorOutput "Checking prerequisites..." Blue
Test-Prerequisites

# Create project structure
Write-ColorOutput "Creating project structure..." Blue
$projectPath = New-ProjectStructure -ProjectName $ProjectName

# Create configuration files
Write-ColorOutput "Creating configuration files..." Blue
New-SerenaConfig -ProjectPath $projectPath -Language $Language
New-CipherConfig -ProjectPath $projectPath
New-EnvFile -ProjectPath $projectPath
New-ClaudeConfig -ProjectPath $projectPath -Language $Language
New-SetupInstructions -ProjectPath $projectPath

Write-Host
Write-ColorOutput "âœ… MCP server configuration completed successfully!" Green
Write-Host
Write-ColorOutput "Next steps:" Blue
Write-ColorOutput "1. Navigate to project: cd $ProjectName" Yellow
Write-ColorOutput "2. Update OPENAI_API_KEY in .env file" Yellow
Write-ColorOutput "3. Follow instructions in MCP_SETUP_INSTRUCTIONS.md" Yellow
Write-Host
Write-ColorOutput "Happy coding with Claude Code + Serena + Cipher! ðŸš€" Blue