#!/usr/bin/env nu

# MCP Starter Script - Nushell Version
# Configures Serena and Cipher MCP servers for Claude Code

# Check prerequisites
def check_prerequisites [] {
    let required_commands = ["node", "npm", "python3", "uv"]
    let missing = $required_commands | filter {|cmd| 
        (which $cmd | is-empty)
    }
    
    if ($missing | length) > 0 {
        print -e $"(ansi red)Error: Missing dependencies: ($missing | str join ', ')(ansi reset)"
        print -e $"(ansi yellow)Please install the missing dependencies and try again.(ansi reset)"
        exit 1
    }
}

# Create project structure
def create_project_structure [project_name: string] {
    let project_path = $"(pwd)/($project_name)"
    
    if ($project_path | path exists) {
        print -e $"(ansi yellow)Warning: Project directory already exists: ($project_path)(ansi reset)"
        let reply = (input "Do you want to continue? (y/n): ")
        if $reply != "y" {
            print -e $"(ansi red)Aborted.(ansi reset)"
            exit 1
        }
    }
    
    mkdir $project_path
    mkdir $"($project_path)/.serena"
    mkdir $"($project_path)/memAgent"
    
    $project_path
}

# Create Serena configuration
def create_serena_config [project_path: string, language: string] {
    let config_file = $"($project_path)/.serena/project.yml"
    let project_name = ($project_path | path basename)
    let created_at = (date now | format date "%Y-%m-%dT%H:%M:%SZ")
    
    let config = $"# Serena Project Configuration
# Generated by claude-mcp-init script

name: ($project_name)
language: ($language)
version: __VERSION__

# Project settings
settings:
  read_only: false
  auto_index: true
  enable_shell: true

# Language-specific settings
language_settings:
  primary_language: ($language)
  type_checking: true
  linting: true

# Tools configuration
tools:
  excluded_tools: []
  
# Memory settings
memories:
  enabled: true
  auto_save: true

# Context and modes
default_context: claude-code
default_modes:
  - interactive
  - editing

# Project metadata
metadata:
  created_at: ($created_at)
  created_by: claude-mcp-init"
    
    $config | save -f $config_file
    print -e $"(ansi green)Created Serena configuration: ($config_file)(ansi reset)"
}

# Create Cipher configuration
def create_cipher_config [project_path: string] {
    let config_file = $"($project_path)/memAgent/cipher.yml"
    
    let config = "# Cipher Memory Agent Configuration
# Generated by claude-mcp-init script

# LLM Configuration
llm:
  provider: openai
  model: gpt-4-turbo
  apiKey: $OPENAI_API_KEY
  temperature: 0.7
  maxTokens: 4096

# Embedding Configuration
embedding:
  provider: openai
  model: text-embedding-3-small
  apiKey: $OPENAI_API_KEY
  dimensions: 1536

# System Prompt
systemPrompt: |
  You are an intelligent coding assistant with persistent memory capabilities.
  You help developers with code analysis, debugging, and implementation tasks.
  You maintain context across sessions and learn from previous interactions.

# Memory Configuration
memory:
  enabled: true
  type: persistent
  storage:
    type: local
    path: ./memory_store
  
# Vector Store Configuration
vectorStore:
  type: in-memory
  collection: project_memories

# Session Configuration
session:
  persistent: true
  autoSave: true
  saveInterval: 300 # seconds

# Tool Configuration
tools:
  enabled: true
  allowedTools:
    - cipher_memory_search
    - cipher_extract_and_operate_memory
    - cipher_add_memory
    - cipher_update_memory
    - cipher_delete_memory

# MCP Server Settings
mcp:
  mode: stdio
  strict: false
  timeout: 30000 # milliseconds

# Logging
logging:
  level: info
  file: ./logs/cipher.log"
    
    $config | save -f $config_file
    print -e $"(ansi green)Created Cipher configuration: ($config_file)(ansi reset)"
}

# Create .env file
def create_env_file [project_path: string] {
    let env_file = $"($project_path)/.env"
    
    if ($env_file | path exists) {
        print -e $"(ansi yellow)Warning: .env file already exists(ansi reset)"
        return
    }
    
    let env_content = "# Environment Variables for MCP Servers
# Generated by claude-mcp-init script

# OpenAI Configuration (Required for Cipher)
OPENAI_API_KEY=your-openai-api-key-here

# Optional: Additional API Keys
# ANTHROPIC_API_KEY=your-anthropic-api-key
# VOYAGE_API_KEY=your-voyage-api-key

# Cipher Configuration
CIPHER_LOG_LEVEL=info
NODE_ENV=development

# Vector Store Configuration (Optional)
# VECTOR_STORE_TYPE=qdrant
# VECTOR_STORE_URL=http://localhost:6333
# VECTOR_STORE_API_KEY=your-qdrant-api-key

# Workspace Memory (Optional)
USE_WORKSPACE_MEMORY=true
WORKSPACE_VECTOR_STORE_COLLECTION=workspace_memory"
    
    $env_content | save -f $env_file
    print -e $"(ansi green)Created .env file: ($env_file)(ansi reset)"
    print -e $"(ansi yellow)IMPORTANT: Please update the OPENAI_API_KEY in the .env file(ansi reset)"
}

# Generate Claude Code MCP configuration
def generate_claude_config [project_path: string, language: string] {
    let config_file = $"($project_path)/claude-mcp-config.json"
    
    let config = ({
        mcpServers: {
            serena: {
                command: "uvx",
                args: [
                    "--from",
                    "git+https://github.com/oraios/serena",
                    "serena-mcp-server",
                    "--context",
                    "claude-code",
                    "--project",
                    $project_path,
                    "--language",
                    $language
                ]
            },
            cipher: {
                type: "stdio",
                command: "cipher",
                args: [
                    "--mode",
                    "mcp",
                    "--agent",
                    $"($project_path)/memAgent/cipher.yml"
                ],
                env: {
                    OPENAI_API_KEY: "${OPENAI_API_KEY}"
                }
            }
        }
    } | to json)
    
    $config | save -f $config_file
    print -e $"(ansi green)Generated Claude Code MCP configuration: ($config_file)(ansi reset)"
}

# Create setup instructions
def create_setup_instructions [project_path: string] {
    let instructions_file = $"($project_path)/MCP_SETUP_INSTRUCTIONS.md"
    
    let instructions = "# MCP Server Setup Instructions

## Prerequisites Checklist

1. **Environment Variables**
   - [ ] Update `OPENAI_API_KEY` in `.env` file

2. **Install Dependencies**
   ```bash
   # Install Cipher globally
   npm install -g @byterover/cipher
   
   # Install uv (Python package manager) if not already installed
   curl -LsSf https://astral.sh/uv/install.sh | sh
   ```

## Claude Code Configuration

1. **Add MCP servers to Claude Code**:
   ```bash
   # From the project directory, run:
   claude mcp add serena -- uvx --from git+https://github.com/oraios/serena serena-mcp-server --context claude-code --project $(pwd)
   claude mcp add cipher -- cipher --mode mcp --agent $(pwd)/memAgent/cipher.yml
   ```

2. **Start Claude Code**:
   ```bash
   claude
   ```

3. **Initialize Serena** (in Claude Code chat):
   ```
   /mcp__serena__initial_instructions
   ```

## Manual Configuration (Alternative)

If automatic configuration doesn't work, manually add to Claude Code's MCP configuration:

1. Run `claude mcp edit` to open the configuration file
2. Copy the contents from `claude-mcp-config.json` to the configuration

## Verification

1. Check that both MCP servers are running:
   - Look for the hammer icon in Claude Code
   - Available tools should include both Serena and Cipher tools

2. Test Serena:
   ```
   \"Show me the project structure\"
   ```

3. Test Cipher:
   ```
   \"Remember that this project uses [your framework/language]\"
   ```

## Troubleshooting

- **Serena not responding**: Check if language servers are installed for your chosen language
- **Cipher memory errors**: Verify OPENAI_API_KEY is set correctly
- **Connection issues**: Restart Claude Code and check logs

## Additional Resources

- [Serena Documentation](https://github.com/oraios/serena)
- [Cipher Documentation](https://github.com/campfirein/cipher)
- [Claude Code MCP Docs](https://docs.anthropic.com/claude-code/mcp)"
    
    $instructions | save -f $instructions_file
    print -e $"(ansi green)Created setup instructions: ($instructions_file)(ansi reset)"
}

# Main function
def main [
    project_name: string
    language: string = "typescript"
] {
    print -e $"(ansi blue)MCP Starter - Nushell Version(ansi reset)"
    print -e $"(ansi blue)=============================(ansi reset)"
    
    # Validate language
    let valid_languages = ["typescript", "javascript", "python", "java", "go", "rust", "php", "elixir", "clojure", "c", "cpp"]
    let language = if $language in $valid_languages {
        $language
    } else {
        print -e $"(ansi yellow)Warning: Unsupported language '($language)'. Using 'typescript' instead.(ansi reset)"
        "typescript"
    }
    
    print -e $"(ansi green)Project: ($project_name)(ansi reset)"
    print -e $"(ansi green)Language: ($language)(ansi reset)"
    print ""
    
    # Check prerequisites
    print -e $"(ansi blue)Checking prerequisites...(ansi reset)"
    check_prerequisites
    
    # Create project structure
    print -e $"(ansi blue)Creating project structure...(ansi reset)"
    let project_path = (create_project_structure $project_name)
    
    # Create configuration files
    print -e $"(ansi blue)Creating configuration files...(ansi reset)"
    create_serena_config $project_path $language
    create_cipher_config $project_path
    create_env_file $project_path
    generate_claude_config $project_path $language
    create_setup_instructions $project_path
    
    print ""
    print -e $"(ansi green)âœ… MCP server configuration completed successfully!(ansi reset)"
    print ""
    print -e $"(ansi blue)Next steps:(ansi reset)"
    print -e $"(ansi yellow)1. Navigate to project: cd ($project_name)(ansi reset)"
    print -e $"(ansi yellow)2. Update OPENAI_API_KEY in .env file(ansi reset)"
    print -e $"(ansi yellow)3. Follow instructions in MCP_SETUP_INSTRUCTIONS.md(ansi reset)"
    print ""
    print -e $"(ansi blue)Happy coding with Claude Code + Serena + Cipher! ðŸš€(ansi reset)"
}