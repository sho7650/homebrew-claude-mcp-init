#!/usr/bin/env zsh

# Claude MCP Init - Zsh-optimized MCP server configuration tool
# Unified executable for Homebrew distribution
# 
# This script configures Serena and Cipher MCP servers for use with Claude Code,
# optimized specifically for Zsh with enhanced performance and features.

# Zsh strict mode and optimizations
setopt EXTENDED_GLOB
setopt NULL_GLOB
setopt PIPE_FAIL
setopt ERR_EXIT
setopt NO_UNSET

# Enable Zsh colors and completion
autoload -U colors && colors
autoload -Uz compinit && compinit

# Script metadata
typeset -r SCRIPT_VERSION="__VERSION__"
typeset -r SCRIPT_NAME="claude-mcp-init"
typeset -r SCRIPT_DIR="${0:A:h}"
typeset -r LIB_DIR="${SCRIPT_DIR}/../lib"

# Load library functions
if [[ -f "${LIB_DIR}/core.zsh" ]]; then
    source "${LIB_DIR}/core.zsh"
else
    print -P "%F{red}Error: Could not find core.zsh library%f" >&2
    exit 1
fi

# Configuration using associative array
typeset -A CONFIG=(
    [project]=""
    [language]="typescript"
    [in_place]=false
    [shell_type]="zsh"
)

# Main implementation function
run_mcp_init() {
    local project_name="$1"
    local language="${2:-typescript}"
    local in_place_mode="${3:-false}"
    
    # Update configuration
    CONFIG[project]="$project_name"
    CONFIG[language]="$language"
    CONFIG[in_place]="$in_place_mode"
    
    print_header "$SCRIPT_NAME - Version $SCRIPT_VERSION"
    print_info "Detected shell: zsh (optimized)"
    print_success "Project: $project_name"
    print_success "Language: $language"
    echo
    
    # Validate language
    if ! validate_language "$language"; then
        print_warning "Warning: Unsupported language '$language'. Using 'typescript' instead."
        CONFIG[language]="typescript"
        language="typescript"
    fi
    
    # Check prerequisites
    print_info "Checking prerequisites..."
    check_prerequisites || return 1
    
    # Create project structure
    print_info "Creating project structure..."
    local project_path
    project_path=$(create_project_structure "$project_name" "$in_place_mode") || return 1
    
    # Create configuration files
    print_info "Creating configuration files..."
    create_serena_config "$project_path" "$language" "$project_name"
    create_cipher_config "$project_path"
    create_env_file "$project_path"
    generate_claude_config "$project_path" "$language"
    create_setup_instructions "$project_path" "zsh"
    
    echo
    print_success "âœ… MCP server configuration completed successfully!"
    echo
    
    # Show completion message based on mode
    print_info "Next steps:"
    if [[ "$in_place_mode" == "true" ]]; then
        print_warning "1. Update OPENAI_API_KEY in .env file"
        print_warning "2. Follow instructions in MCP_SETUP_INSTRUCTIONS.md"
    else
        print_warning "1. Navigate to project: cd $project_name"
        print_warning "2. Update OPENAI_API_KEY in .env file"
        print_warning "3. Follow instructions in MCP_SETUP_INSTRUCTIONS.md"
    fi
    echo
    print_success "Happy coding with Claude Code + Serena + Cipher! ðŸš€"
}


# Main entry point
main() {
    local in_place_mode=false
    local -a args=()
    
    # Parse arguments manually
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                show_version
                exit 0
                ;;
            --shell)
                show_shell_info
                exit 0
                ;;
            -n|--in-place)
                in_place_mode=true
                shift
                ;;
            -*)
                print_error "Error: Unknown option $1"
                exit 1
                ;;
            *)
                args+=("$1")
                shift
                ;;
        esac
    done
    
    # Validate arguments
    if [[ ${#args} -lt 1 ]]; then
        print_error "Error: Missing project name"
        echo
        print_info "Usage: $SCRIPT_NAME [-n|--in-place] <project_name> [language]"
        print_info "Example: $SCRIPT_NAME my-project typescript"
        print_info "Example: $SCRIPT_NAME -n my-project typescript"
        echo
        print_info "Use '$SCRIPT_NAME --help' for more information."
        exit 1
    fi
    
    # Extract arguments
    local project_name="${args[1]}"
    local language="${args[2]:-typescript}"
    
    # Validate project name using Zsh pattern matching
    if [[ ! "$project_name" =~ ^[a-zA-Z0-9][a-zA-Z0-9._-]*$ ]]; then
        print_error "Error: Invalid project name '$project_name'"
        print_warning "Project names must start with alphanumeric character and contain only letters, numbers, dots, hyphens, and underscores."
        exit 1
    fi
    
    # Run the main functionality
    run_mcp_init "$project_name" "$language" "$in_place_mode"
}

# Enhanced error handling with Zsh features
trap 'print_error "Error: An unexpected error occurred on line $LINENO"; exit 1' ERR

# Execute main function with all arguments
main "$@"