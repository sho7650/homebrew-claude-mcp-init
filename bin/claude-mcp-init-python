#!/usr/bin/env zsh

# Claude MCP Init - Python Backend Wrapper v0.11.2
# Wrapper script that calls the new Python-based modular architecture

# Script metadata
typeset -r SCRIPT_VERSION="0.11.2"
typeset -r SCRIPT_NAME="claude-mcp-init"
typeset -r SCRIPT_DIR="${0:A:h}"
typeset -r LIB_DIR="${SCRIPT_DIR}/../lib"
typeset -r PYTHON_MODULE="${LIB_DIR}/claude_mcp_init"

# Enable Zsh colors for better output
autoload -U colors && colors

# Error handling
set -e

# Print functions for consistent output
print_error() {
    print -P "%F{red}❌ Error: $1%f" >&2
}

print_warning() {
    print -P "%F{yellow}⚠️  Warning: $1%f" >&2
}

print_info() {
    print -P "%F{blue}ℹ️  $1%f"
}

print_success() {
    print -P "%F{green}✅ $1%f"
}

# Check if Python 3 is available
check_python() {
    if ! command -v python3 &>/dev/null; then
        print_error "Python 3 is required but not found in PATH"
        print_info "Please install Python 3.11+ to use claude-mcp-init"
        exit 1
    fi
    
    # Check Python version
    local python_version=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
    local major=$(echo $python_version | cut -d. -f1)
    local minor=$(echo $python_version | cut -d. -f2)
    
    if [[ $major -lt 3 || ($major -eq 3 && $minor -lt 11) ]]; then
        print_error "Python 3.11+ is required (found $python_version)"
        print_info "Please upgrade Python to continue"
        exit 1
    fi
}

# Check if required Python modules are available
check_python_modules() {
    local required_modules=("click" "yaml")
    local missing_modules=()
    
    for module in $required_modules; do
        if ! python3 -c "import $module" &>/dev/null; then
            missing_modules+=($module)
        fi
    done
    
    if [[ ${#missing_modules[@]} -gt 0 ]]; then
        print_error "Missing required Python modules: ${missing_modules[*]}"
        print_info "Installing required modules..."
        
        # Try to install using pip
        if command -v pip3 &>/dev/null; then
            pip3 install ${missing_modules[*]} || {
                print_error "Failed to install Python modules"
                print_info "Please manually install: pip3 install ${missing_modules[*]}"
                exit 1
            }
        else
            print_error "pip3 not found - cannot install modules automatically"
            print_info "Please manually install: pip3 install ${missing_modules[*]}"
            exit 1
        fi
    fi
}

# Process arguments to handle Zsh-specific options and maintain backward compatibility
process_args() {
    local processed_args=()
    local skip_next=false
    
    for arg in "$@"; do
        if [[ "$skip_next" == "true" ]]; then
            skip_next=false
            processed_args+=("$arg")
            continue
        fi
        
        case "$arg" in
            # Handle version flag
            --version|-v)
                processed_args+=("--version")
                ;;
            
            # Handle help flag
            --help|-h)
                processed_args+=("--help")
                ;;
            
            # Handle in-place flag
            --in-place|-n)
                processed_args+=("--in-place")
                ;;
            
            # Handle shell flag (legacy - ignore)
            --shell)
                print_warning "The --shell flag is deprecated and ignored"
                ;;
            
            # Handle modules flag
            --mcp)
                processed_args+=("--mcp")
                skip_next=true
                ;;
            
            # Handle module-specific flags - pass through as-is
            --serena-*|--cipher-*)
                processed_args+=("$arg")
                # Check if this option expects a value
                case "$arg" in
                    *-key|*-language|*-embedding|*-embedding-key|*-system-prompt)
                        skip_next=true
                        ;;
                esac
                ;;
            
            # Handle legacy API key flags (map to new format)
            --openai-key)
                processed_args+=("--cipher-openai-key")
                skip_next=true
                ;;
            
            --anthropic-key)
                processed_args+=("--cipher-anthropic-key")
                skip_next=true
                ;;
            
            # Pass through everything else
            *)
                processed_args+=("$arg")
                ;;
        esac
    done
    
    echo "${processed_args[@]}"
}

# Main execution
main() {
    # Validate environment
    check_python
    check_python_modules
    
    # Process arguments for backward compatibility
    local processed_args=($(process_args "$@"))
    
    # Set up Python path
    export PYTHONPATH="${LIB_DIR}:${PYTHONPATH:-}"
    
    # Execute Python backend (stay in current directory)
    exec python3 -m claude_mcp_init.main "${processed_args[@]}"
}

# Show help if no arguments
if [[ $# -eq 0 ]]; then
    print_info "Claude MCP Init v${SCRIPT_VERSION} - Modular MCP server configuration tool"
    echo
    echo "Usage: claude-mcp-init [OPTIONS] PROJECT_NAME [LANGUAGE]"
    echo
    echo "Options:"
    echo "  --version, -v                 Show version and exit"
    echo "  --help, -h                    Show this help message"
    echo "  --help-modules                Show available MCP modules"
    echo "  -n, --in-place               Create configuration in current directory"
    echo "  --mcp MODULES                Comma-separated list of modules (serena,cipher)"
    echo
    echo "Module-specific options:"
    echo "  --serena-language LANG       Programming language for Serena"
    echo "  --serena-read-only           Enable read-only mode for Serena"
    echo "  --cipher-openai-key KEY      OpenAI API key for Cipher"
    echo "  --cipher-anthropic-key KEY   Anthropic API key for Cipher"
    echo "  --cipher-embedding PROVIDER  Embedding provider for Cipher"
    echo
    echo "Examples:"
    echo "  claude-mcp-init my-project typescript"
    echo "  claude-mcp-init --mcp serena my-project python"
    echo "  claude-mcp-init --mcp cipher --cipher-openai-key sk-xxx my-project"
    echo "  claude-mcp-init -n --mcp serena,cipher my-project"
    echo
    echo "For more information, visit: https://github.com/sho7650/claude-mcp-init"
    exit 0
fi

# Execute main function
main "$@"