#!/usr/bin/env bash

# Core Library for MCP Starter
# Contains common functionality shared across all shell implementations

# Global configuration
MCP_STARTER_VERSION="__VERSION__"  # Will be replaced during build
VALID_LANGUAGES=("typescript" "javascript" "python" "java" "go" "rust" "php" "elixir" "clojure" "c" "cpp")

# Color codes for output (POSIX compatible)
if [ -t 1 ]; then  # Only use colors if stdout is a terminal
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m'
else
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    NC=''
fi

# Function to print colored output
print_color() {
    local message="$1"
    local color="$2"
    printf "%b%s%b\n" "$color" "$message" "$NC"
}

# Function to check prerequisites
check_prerequisites() {
    local missing_deps=()
    
    # Check for required commands
    command -v node >/dev/null 2>&1 || missing_deps+=("node")
    command -v npm >/dev/null 2>&1 || missing_deps+=("npm")
    command -v python3 >/dev/null 2>&1 || missing_deps+=("python3")
    command -v uv >/dev/null 2>&1 || missing_deps+=("uv")
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_color "Error: Missing required dependencies: ${missing_deps[*]}" "$RED"
        print_color "Please install with: brew install ${missing_deps[*]}" "$YELLOW"
        print_color "Or follow the installation guide in README.md" "$YELLOW"
        return 1
    fi
    
    return 0
}

# Function to validate language
validate_language() {
    local language="$1"
    local valid_language
    
    for valid_language in "${VALID_LANGUAGES[@]}"; do
        if [ "$language" = "$valid_language" ]; then
            return 0
        fi
    done
    
    return 1
}

# Function to create project structure
create_project_structure() {
    local project_name="$1"
    local project_path="$(pwd)/${project_name}"
    
    if [ -d "$project_path" ]; then
        print_color "Warning: Project directory already exists: $project_path" "$YELLOW"
        printf "Do you want to continue? (y/n): "
        read -r reply
        case "$reply" in
            [Yy]*)
                ;;
            *)
                print_color "Aborted." "$RED"
                return 1
                ;;
        esac
    fi
    
    # Create project directories
    mkdir -p "$project_path"
    mkdir -p "${project_path}/.serena"
    mkdir -p "${project_path}/memAgent"
    
    printf "%s" "$project_path"
    return 0
}

# Function to create Serena configuration
create_serena_config() {
    local project_path="$1"
    local language="$2"
    local config_file="${project_path}/.serena/project.yml"
    local project_name
    project_name=$(basename "$project_path")
    
    cat > "$config_file" << EOF
# Serena Project Configuration
# Generated by mcp-starter v${MCP_STARTER_VERSION}

name: ${project_name}
language: ${language}
version: 1.0.0

# Project settings
settings:
  read_only: false
  auto_index: true
  enable_shell: true

# Language-specific settings
language_settings:
  primary_language: ${language}
  type_checking: true
  linting: true

# Tools configuration
tools:
  excluded_tools: []
  
# Memory settings
memories:
  enabled: true
  auto_save: true

# Context and modes
default_context: claude-code
default_modes:
  - interactive
  - editing

# Project metadata
metadata:
  created_at: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
  created_by: mcp-starter
  version: ${MCP_STARTER_VERSION}
EOF
    
    print_color "Created Serena configuration: $config_file" "$GREEN"
}

# Function to create Cipher configuration
create_cipher_config() {
    local project_path="$1"
    local config_file="${project_path}/memAgent/cipher.yml"
    
    cat > "$config_file" << 'EOF'
# Cipher Memory Agent Configuration
# Generated by mcp-starter

# LLM Configuration
llm:
  provider: openai
  model: gpt-4-turbo
  apiKey: $OPENAI_API_KEY
  temperature: 0.7
  maxTokens: 4096

# Embedding Configuration
embedding:
  provider: openai
  model: text-embedding-3-small
  apiKey: $OPENAI_API_KEY
  dimensions: 1536

# System Prompt
systemPrompt: |
  You are an intelligent coding assistant with persistent memory capabilities.
  You help developers with code analysis, debugging, and implementation tasks.
  You maintain context across sessions and learn from previous interactions.

# Memory Configuration
memory:
  enabled: true
  type: persistent
  storage:
    type: local
    path: ./memory_store
  
# Vector Store Configuration
vectorStore:
  type: in-memory
  collection: project_memories

# Session Configuration
session:
  persistent: true
  autoSave: true
  saveInterval: 300 # seconds

# Tool Configuration
tools:
  enabled: true
  allowedTools:
    - cipher_memory_search
    - cipher_extract_and_operate_memory
    - cipher_add_memory
    - cipher_update_memory
    - cipher_delete_memory

# MCP Server Settings
mcp:
  mode: stdio
  strict: false
  timeout: 30000 # milliseconds

# Logging
logging:
  level: info
  file: ./logs/cipher.log
EOF
    
    print_color "Created Cipher configuration: $config_file" "$GREEN"
}

# Function to create .env file
create_env_file() {
    local project_path="$1"
    local env_file="${project_path}/.env"
    
    if [ -f "$env_file" ]; then
        print_color "Warning: .env file already exists" "$YELLOW"
        return 0
    fi
    
    cat > "$env_file" << 'EOF'
# Environment Variables for MCP Servers
# Generated by mcp-starter

# OpenAI Configuration (Required for Cipher)
OPENAI_API_KEY=your-openai-api-key-here

# Optional: Additional API Keys
# ANTHROPIC_API_KEY=your-anthropic-api-key
# VOYAGE_API_KEY=your-voyage-api-key

# Cipher Configuration
CIPHER_LOG_LEVEL=info
NODE_ENV=development

# Vector Store Configuration (Optional)
# VECTOR_STORE_TYPE=qdrant
# VECTOR_STORE_URL=http://localhost:6333
# VECTOR_STORE_API_KEY=your-qdrant-api-key

# Workspace Memory (Optional)
USE_WORKSPACE_MEMORY=true
WORKSPACE_VECTOR_STORE_COLLECTION=workspace_memory
EOF
    
    print_color "Created .env file: $env_file" "$GREEN"
    print_color "IMPORTANT: Please update the OPENAI_API_KEY in the .env file" "$YELLOW"
}

# Function to generate Claude Code MCP configuration
generate_claude_config() {
    local project_path="$1"
    local language="$2"
    local config_file="${project_path}/claude-mcp-config.json"
    
    cat > "$config_file" << EOF
{
  "mcpServers": {
    "serena": {
      "command": "uvx",
      "args": [
        "--from",
        "git+https://github.com/oraios/serena",
        "serena-mcp-server",
        "--context",
        "claude-code",
        "--project",
        "${project_path}",
        "--language",
        "${language}"
      ]
    },
    "cipher": {
      "type": "stdio",
      "command": "cipher",
      "args": [
        "--mode",
        "mcp",
        "--agent",
        "${project_path}/memAgent/cipher.yml"
      ],
      "env": {
        "OPENAI_API_KEY": "\${OPENAI_API_KEY}"
      }
    }
  }
}
EOF
    
    print_color "Generated Claude Code MCP configuration: $config_file" "$GREEN"
}

# Function to create setup instructions
create_setup_instructions() {
    local project_path="$1"
    local shell_type="$2"
    local instructions_file="${project_path}/MCP_SETUP_INSTRUCTIONS.md"
    
    cat > "$instructions_file" << EOF
# MCP Server Setup Instructions

Generated by mcp-starter v${MCP_STARTER_VERSION}
Detected shell: ${shell_type}

## Prerequisites Checklist

1. **Environment Variables**
   - [ ] Update \`OPENAI_API_KEY\` in \`.env\` file

2. **Install Dependencies**
   \`\`\`bash
   # Install Cipher globally
   npm install -g @byterover/cipher
   
   # Install uv (Python package manager) if not already installed
   # (Should be installed via Homebrew)
   curl -LsSf https://astral.sh/uv/install.sh | sh
   \`\`\`

## Claude Code Configuration

1. **Add MCP servers to Claude Code**:
   \`\`\`bash
   # From the project directory, run:
   claude mcp add serena -- uvx --from git+https://github.com/oraios/serena serena-mcp-server --context claude-code --project \$(pwd)
   claude mcp add cipher -- cipher --mode mcp --agent \$(pwd)/memAgent/cipher.yml
   \`\`\`

2. **Start Claude Code**:
   \`\`\`bash
   claude
   \`\`\`

3. **Initialize Serena** (in Claude Code chat):
   \`\`\`
   /mcp__serena__initial_instructions
   \`\`\`

## Manual Configuration (Alternative)

If automatic configuration doesn't work, manually add to Claude Code's MCP configuration:

1. Run \`claude mcp edit\` to open the configuration file
2. Copy the contents from \`claude-mcp-config.json\` to the configuration

## Verification

1. Check that both MCP servers are running:
   - Look for the hammer icon in Claude Code
   - Available tools should include both Serena and Cipher tools

2. Test Serena:
   \`\`\`
   "Show me the project structure"
   \`\`\`

3. Test Cipher:
   \`\`\`
   "Remember that this project uses [your framework/language]"
   \`\`\`

## Troubleshooting

- **Serena not responding**: Check if language servers are installed for your chosen language
- **Cipher memory errors**: Verify OPENAI_API_KEY is set correctly
- **Connection issues**: Restart Claude Code and check logs

## Shell-Specific Notes

$(get_shell_advice "$shell_type")

## Additional Resources

- [Serena Documentation](https://github.com/oraios/serena)
- [Cipher Documentation](https://github.com/campfirein/cipher)
- [Claude Code MCP Docs](https://docs.anthropic.com/claude-code/mcp)
- [MCP Starter Repository](https://github.com/yourusername/mcp-starter)
EOF
    
    print_color "Created setup instructions: $instructions_file" "$GREEN"
}

# Function to show version
show_version() {
    echo "mcp-starter version ${MCP_STARTER_VERSION}"
    echo "Multi-shell MCP server configuration tool"
}

# Function to show help
show_help() {
    cat << EOF
mcp-starter - Multi-shell MCP server configuration tool

USAGE:
    mcp-starter [OPTIONS] <PROJECT_NAME> [LANGUAGE]

ARGUMENTS:
    <PROJECT_NAME>    Name of the project directory to create
    [LANGUAGE]        Programming language (default: typescript)

OPTIONS:
    -h, --help        Show this help message
    -v, --version     Show version information
    --shell           Show detected shell information

SUPPORTED LANGUAGES:
    ${VALID_LANGUAGES[*]}

EXAMPLES:
    mcp-starter my-project
    mcp-starter my-app typescript
    mcp-starter python-app python
    mcp-starter rust-project rust

For more information, visit: https://github.com/yourusername/mcp-starter
EOF
}

# Function to show shell information
show_shell_info() {
    local shell_type
    shell_type=$(detect_current_shell)
    
    echo "Shell Detection Information:"
    echo "  Detected shell: $shell_type"
    echo "  Shell path: ${SHELL:-<not set>}"
    echo "  Parent PID: ${PPID:-<not available>}"
    echo "  Supported: $(is_shell_supported "$shell_type" && echo "Yes" || echo "No")"
    echo ""
    echo "Shell-specific advice:"
    get_shell_advice "$shell_type"
}