#!/usr/bin/env zsh

# Serena MCP Module for Claude MCP Init
# Handles Serena semantic code toolkit configuration

# Prevent double loading
[[ -n "${SERENA_MODULE_LOADED:-}" ]] && return 0

# Module configuration (only initialize if not already set)
if [[ -z "${SERENA_CONFIG:-}" ]]; then
    typeset -gA SERENA_CONFIG=(
        [language]="typescript"
        [project_name]=""
        [read_only]="false"
        [excluded_tools]=""
        [initial_prompt]=""
    )
fi

# Validate Serena requirements
serena_validate_requirements() {
    # Check for Node.js and npm
    if ! command -v node &>/dev/null || ! command -v npm &>/dev/null; then
        print_error "Serena requires Node.js and npm"
        return 1
    fi
    
    # Check for uvx (for running Serena via uvx)
    if ! command -v uvx &>/dev/null && ! command -v uv &>/dev/null; then
        print_warning "UV/UVX not found - Serena will be installed via uvx on first use"
    fi
    
    return 0
}

# Generate Serena configuration
serena_generate_config() {
    local project_path="$1"
    shift
    local -A config=("$@")
    
    local language="${config[serena_language]:-${SERENA_CONFIG[language]}}"
    local project_name="${config[project]:-${project_path:t}}"
    local config_file="${project_path}/.serena/project.yml"
    
    # Validate C# projects require .sln file
    if [[ "$language" == "csharp" ]]; then
        if ! find "$project_path" -maxdepth 2 -name "*.sln" -type f | head -1 | grep -q .; then
            print_warning "Warning: C# projects require a .sln file in the project folder"
        fi
    fi
    
    # Ensure directory exists
    ensure_directory "${project_path}/.serena"
    
    # Generate official Serena schema-compliant YAML
    cat > "$config_file" <<EOF
# language of the project (csharp, python, rust, java, typescript, javascript, go, cpp, or ruby)
# Generated by claude-mcp-init v${MCP_STARTER_VERSION:-0.10.0}
language: ${language}

# whether to use the project's gitignore file to ignore files
ignore_all_files_in_gitignore: true

# list of additional paths to ignore
# same syntax as gitignore, so you can use * and **
ignored_paths: []

# whether the project is in read-only mode
# If set to true, all editing tools will be disabled
read_only: ${SERENA_CONFIG[read_only]}

# list of tool names to exclude
excluded_tools: [${SERENA_CONFIG[excluded_tools]}]

# initial prompt or context for the project
initial_prompt: "${SERENA_CONFIG[initial_prompt]}"

# name of the project
project_name: "${project_name}"
EOF
    
    print_success "Created Serena configuration: $config_file"
    print_info "âœ“ Using official Serena schema with gitignore integration"
    
    return 0
}

# Get Serena server configuration for .mcp.json
serena_get_server_config() {
    local project_path="$1"
    local abs_project_path="${project_path:A}"
    
    cat <<EOF
{
    "type": "stdio",
    "command": "uvx",
    "args": [
        "--from",
        "git+https://github.com/oraios/serena",
        "serena",
        "start-mcp-server",
        "--context",
        "ide-assistant",
        "--project",
        "${abs_project_path}"
    ],
    "env": {}
}
EOF
}

# Get Serena environment variables
serena_get_env_vars() {
    # Serena doesn't require specific env vars
    echo ""
}

# Get Serena metadata
serena_get_metadata() {
    cat <<EOF
{
    "name": "serena",
    "version": "1.0.0",
    "description": "Semantic code toolkit for intelligent code analysis and manipulation"
}
EOF
}

# Get CLI options for Serena
serena_get_cli_options() {
    cat <<EOF
    --serena-language LANG    Programming language for Serena (default: typescript)
    --serena-readonly         Enable read-only mode for Serena
    --serena-exclude TOOLS    Comma-separated list of tools to exclude
EOF
}

# Process CLI arguments for Serena
serena_process_args() {
    local arg="$1"
    local value="$2"
    
    case "$arg" in
        --serena-language)
            SERENA_CONFIG[language]="$value"
            return 0
            ;;
        --serena-readonly)
            SERENA_CONFIG[read_only]="true"
            return 0
            ;;
        --serena-exclude)
            SERENA_CONFIG[excluded_tools]="$value"
            return 0
            ;;
    esac
    
    return 1
}

# Initialize Serena module
serena_init() {
    print_info "Serena module loaded"
    return 0
}

# Cleanup Serena resources
serena_cleanup() {
    # No cleanup needed
    return 0
}

# Override base functions with serena_ prefix
mcp_validate_requirements() { serena_validate_requirements "$@"; }
mcp_generate_config() { serena_generate_config "$@"; }
mcp_get_server_config() { serena_get_server_config "$@"; }
mcp_get_env_vars() { serena_get_env_vars "$@"; }
mcp_get_metadata() { serena_get_metadata "$@"; }
mcp_get_cli_options() { serena_get_cli_options "$@"; }
mcp_process_args() { serena_process_args "$@"; }
mcp_init() { serena_init "$@"; }
mcp_cleanup() { serena_cleanup "$@"; }

# Mark as loaded
export SERENA_MODULE_LOADED=1