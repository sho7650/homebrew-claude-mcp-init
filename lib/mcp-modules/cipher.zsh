#!/usr/bin/env zsh

# Cipher MCP Module for Claude MCP Init
# Handles Cipher persistent memory layer configuration

# Prevent double loading
[[ -n "${CIPHER_MODULE_LOADED:-}" ]] && return 0

# Module configuration (only initialize if not already set)
if [[ -z "${CIPHER_CONFIG:-}" ]]; then
    typeset -gA CIPHER_CONFIG=(
        [openai_key]=""
        [anthropic_key]=""
        [embedding_provider]=""
        [embedding_key]=""
        [system_prompt]="You are a coding assistant with persistent memory capabilities. You can remember context across conversations and provide contextually aware assistance."
    )
fi

# Synchronize main CONFIG array with CIPHER_CONFIG
cipher_sync_config() {
    local -A config=("$@")
    
    # Sync API keys from main CONFIG to CIPHER_CONFIG
    [[ -n "${config[openai_key]:-}" ]] && CIPHER_CONFIG[openai_key]="${config[openai_key]}"
    [[ -n "${config[anthropic_key]:-}" ]] && CIPHER_CONFIG[anthropic_key]="${config[anthropic_key]}"
    
    # Sync embedding configuration from main CONFIG to CIPHER_CONFIG
    [[ -n "${config[embedding_provider]:-}" ]] && CIPHER_CONFIG[embedding_provider]="${config[embedding_provider]}"
    [[ -n "${config[embedding_key]:-}" ]] && CIPHER_CONFIG[embedding_key]="${config[embedding_key]}"
}

# Validate Cipher requirements
cipher_validate_requirements() {
    # Check for Python and UV
    if ! command -v python3 &>/dev/null; then
        print_error "Cipher requires Python 3.11+"
        return 1
    fi
    
    if ! command -v uv &>/dev/null; then
        print_warning "UV package manager not found - will need to install: curl -LsSf https://astral.sh/uv/install.sh | sh"
    fi
    
    return 0
}

# Generate Cipher configuration
cipher_generate_config() {
    local project_path="$1"
    shift
    local -A config=("$@")
    local config_file="${project_path}/memAgent/cipher.yml"
    
    # Synchronize main CONFIG with CIPHER_CONFIG before generation
    cipher_sync_config ${(kv)config}
    

    
    # Ensure directory exists
    ensure_directory "${project_path}/memAgent"
    
    # Determine primary provider based on available API keys
    local primary_provider="openai"
    local primary_model="gpt-4-turbo"
    
    # Check both config array and synced CIPHER_CONFIG for anthropic key
    if [[ -n "${config[anthropic_key]:-}" ]] || [[ -n "${CIPHER_CONFIG[anthropic_key]:-}" ]]; then
        primary_provider="anthropic"
        primary_model="claude-3-5-sonnet-20241022"
    fi
    
    # Generate simplified Cipher configuration (API keys via env vars)
    cat > "$config_file" <<EOF
# Cipher Configuration
# Generated by claude-mcp-init v${MCP_STARTER_VERSION:-0.10.0}

# LLM Configuration
llm:
  provider: ${primary_provider}
  model: ${primary_model}
$(if [[ "$primary_provider" == "openai" ]]; then
    echo "  apiKey: \$OPENAI_API_KEY"
elif [[ "$primary_provider" == "anthropic" ]]; then
    echo "  apiKey: \$ANTHROPIC_API_KEY"
fi)

# System prompt for coding assistant
systemPrompt: '${CIPHER_CONFIG[system_prompt]}'

# Embedding Configuration (if specified)
$(if [[ -n "${CIPHER_CONFIG[embedding_provider]}" && "${CIPHER_CONFIG[embedding_provider]}" != "disabled" ]]; then
    case "${CIPHER_CONFIG[embedding_provider]}" in
        openai)
            echo "embedding:"
            echo "  type: openai"
            echo "  model: text-embedding-3-small"
            echo "  apiKey: \$OPENAI_API_KEY"
            ;;
        azure-openai)
            echo "embedding:"
            echo "  type: openai"
            echo "  model: text-embedding-3-small"
            echo "  apiKey: \$AZURE_OPENAI_API_KEY"
            echo "  baseUrl: \$AZURE_OPENAI_ENDPOINT"
            ;;
        gemini)
            echo "embedding:"
            echo "  type: gemini"
            echo "  model: text-embedding-004"
            echo "  apiKey: \$GEMINI_API_KEY"
            ;;
        voyage)
            echo "embedding:"
            echo "  type: voyage"
            echo "  model: voyage-3-large"
            echo "  apiKey: \$VOYAGE_API_KEY"
            echo "  # Note: Voyage models use fixed 1024 dimensions"
            ;;
        qwen)
            echo "embedding:"
            echo "  type: qwen"
            echo "  model: text-embedding-v3"
            echo "  apiKey: \$QWEN_API_KEY"
            echo "  dimensions: 1024  # Required: 1024, 768, or 512"
            ;;
        aws-bedrock)
            echo "embedding:"
            echo "  type: aws-bedrock"
            echo "  model: amazon.titan-embed-text-v2:0"
            echo "  region: \$AWS_REGION"
            echo "  accessKeyId: \$AWS_ACCESS_KEY_ID"
            echo "  secretAccessKey: \$AWS_SECRET_ACCESS_KEY"
            echo "  dimensions: 1024  # Required: 1024, 512, or 256"
            ;;
        lmstudio)
            echo "embedding:"
            echo "  type: lmstudio"
            echo "  model: nomic-embed-text-v1.5  # or bge-large, bge-base, bge-small"
            echo "  baseUrl: http://localhost:1234/v1  # Optional, defaults to this"
            echo "  # dimensions: 768  # Optional, auto-detected based on model"
            ;;
        ollama)
            echo "embedding:"
            echo "  type: ollama"
            echo "  model: nomic-embed-text"
            echo "  baseUrl: http://localhost:11434"
            ;;
        disabled)
            echo "embedding:"
            echo "  disabled: true"
            ;;
        *)
            echo "# Default embedding provider will be used"
            ;;
    esac
elif [[ "${CIPHER_CONFIG[embedding_provider]}" == "disabled" ]]; then
    echo "embedding:"
    echo "  disabled: true"
fi)
EOF
    
    print_success "Created Cipher configuration: $config_file"
    print_info "âœ“ Configured for ${primary_provider} provider with env-based API keys"
    
    return 0
}

# Get Cipher server configuration for .mcp.json
cipher_get_server_config() {
    local project_path="$1"
    shift
    local -A config=("$@")
    
    # Synchronize main CONFIG with CIPHER_CONFIG before generating server config
    cipher_sync_config ${(kv)config}
    
    # Build environment variables object
    local env_vars=""
    local needs_comma=false
    
    if [[ -n "${config[openai_key]:-}" ]]; then
        env_vars="${env_vars}        \"OPENAI_API_KEY\": \"${config[openai_key]:-}\""
        needs_comma=true
    fi
    
    if [[ -n "${config[anthropic_key]:-}" ]]; then
        [[ "$needs_comma" == "true" ]] && env_vars="${env_vars},"
        env_vars="${env_vars}
        \"ANTHROPIC_API_KEY\": \"${config[anthropic_key]:-}\""
        needs_comma=true
    fi
    
    # Add embedding API keys if needed
    case "${CIPHER_CONFIG[embedding_provider]}" in
        openai)
            # OpenAI key already handled above
            ;;
        azure-openai)
            if [[ -n "${CIPHER_CONFIG[embedding_key]}" ]]; then
                [[ "$needs_comma" == "true" ]] && env_vars="${env_vars},"
                env_vars="${env_vars}
        \"AZURE_OPENAI_API_KEY\": \"${CIPHER_CONFIG[embedding_key]}\""
                needs_comma=true
            fi
            ;;
        gemini)
            if [[ -n "${CIPHER_CONFIG[embedding_key]}" ]]; then
                [[ "$needs_comma" == "true" ]] && env_vars="${env_vars},"
                env_vars="${env_vars}
        \"GEMINI_API_KEY\": \"${CIPHER_CONFIG[embedding_key]}\""
                needs_comma=true
            fi
            ;;
        voyage)
            if [[ -n "${CIPHER_CONFIG[embedding_key]}" ]]; then
                [[ "$needs_comma" == "true" ]] && env_vars="${env_vars},"
                env_vars="${env_vars}
        \"VOYAGE_API_KEY\": \"${CIPHER_CONFIG[embedding_key]}\""
                needs_comma=true
            fi
            ;;
        qwen)
            if [[ -n "${CIPHER_CONFIG[embedding_key]}" ]]; then
                [[ "$needs_comma" == "true" ]] && env_vars="${env_vars},"
                env_vars="${env_vars}
        \"QWEN_API_KEY\": \"${CIPHER_CONFIG[embedding_key]}\""
                needs_comma=true
            fi
            ;;
    esac
    
    cat <<EOF
{
    "type": "stdio",
    "command": "cipher",
    "args": ["--mode", "mcp"],
    "env": {
${env_vars}
    }
}
EOF
}

# Get Cipher environment variables
cipher_get_env_vars() {
    # Simple direct output to avoid associative array issues
    echo "OPENAI_API_KEY=${CIPHER_CONFIG[openai_key]:-}"
    echo "ANTHROPIC_API_KEY=${CIPHER_CONFIG[anthropic_key]:-}"
    
    # Add embedding provider keys if configured
    case "${CIPHER_CONFIG[embedding_provider]}" in
        azure-openai)
            [[ -n "${CIPHER_CONFIG[embedding_key]}" ]] && echo "AZURE_OPENAI_API_KEY=${CIPHER_CONFIG[embedding_key]}"
            ;;
        gemini)
            [[ -n "${CIPHER_CONFIG[embedding_key]}" ]] && echo "GEMINI_API_KEY=${CIPHER_CONFIG[embedding_key]}"
            ;;
        voyage)
            [[ -n "${CIPHER_CONFIG[embedding_key]}" ]] && echo "VOYAGE_API_KEY=${CIPHER_CONFIG[embedding_key]}"
            ;;
        qwen)
            [[ -n "${CIPHER_CONFIG[embedding_key]}" ]] && echo "QWEN_API_KEY=${CIPHER_CONFIG[embedding_key]}"
            ;;
        lmstudio|ollama)
            # No additional keys needed for local providers
            ;;
    esac
}

# Get Cipher metadata
cipher_get_metadata() {
    cat <<EOF
{
    "name": "cipher",
    "version": "1.0.0",
    "description": "Persistent memory layer for context-aware AI assistance"
}
EOF
}

# Get CLI options for Cipher
cipher_get_cli_options() {
    cat <<EOF
    --cipher-openai-key KEY       OpenAI API key for Cipher
    --cipher-anthropic-key KEY    Anthropic API key for Cipher
    --cipher-embedding PROVIDER   Embedding provider:
                                    openai, azure-openai, gemini, voyage, qwen,
                                    aws-bedrock, lmstudio, ollama, disabled
    --cipher-embedding-key KEY    API key for embedding provider (if required)
EOF
}

# Process CLI arguments for Cipher
cipher_process_args() {
    local arg="$1"
    local value="$2"
    
    case "$arg" in
        --cipher-openai-key|--openai-key)
            CIPHER_CONFIG[openai_key]="$value"
            # Also update main CONFIG for server config generation
            CONFIG[openai_key]="$value"
            return 0
            ;;
        --cipher-anthropic-key|--anthropic-key)
            CIPHER_CONFIG[anthropic_key]="$value"
            # Also update main CONFIG for server config generation
            CONFIG[anthropic_key]="$value"
            return 0
            ;;
        --cipher-embedding)
            CIPHER_CONFIG[embedding_provider]="$value"
            return 0
            ;;
        --cipher-embedding-key)
            CIPHER_CONFIG[embedding_key]="$value"
            return 0
            ;;
    esac
    
    return 1
}

# Initialize Cipher module
cipher_init() {
    print_info "Cipher module loaded"
    return 0
}

# Cleanup Cipher resources
cipher_cleanup() {
    # No cleanup needed
    return 0
}

# Cipher module functions are called directly via ${module_name}_function_name
# No more mcp_* function overrides to prevent conflicts with other modules

# Mark as loaded
export CIPHER_MODULE_LOADED=1