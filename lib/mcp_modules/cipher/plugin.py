"""
Cipher MCP Plugin - Persistent memory layer for context-aware AI assistance
"""

import logging
from pathlib import Path
from typing import Dict, List, Tuple, Any, Optional

import click
import yaml

from mcp_modules.base import MCPModule
from claude_mcp_init.utils import (
    check_command, 
    validate_project_name, 
    validate_api_key,
    get_python_version,
    ensure_directory,
    write_yaml_file
)

logger = logging.getLogger(__name__)


class CipherPlugin(MCPModule):
    """Cipher persistent memory layer plugin"""
    
    @property
    def metadata(self) -> Dict[str, str]:
        """Return plugin metadata"""
        return {
            "name": "cipher",
            "version": "1.0.0",
            "description": "Persistent memory layer for context-aware AI assistance",
            "author": "Claude MCP Init"
        }
    
    def get_cli_options(self) -> List[click.Option]:
        """Return CLI options for Cipher plugin"""
        return [
            click.option(
                '--cipher-openai-key',
                help='OpenAI API key for Cipher'
            ),
            click.option(
                '--cipher-anthropic-key',
                help='Anthropic API key for Cipher'
            ),
            click.option(
                '--cipher-embedding',
                type=click.Choice([
                    'openai', 'azure-openai', 'gemini', 'voyage', 'qwen',
                    'aws-bedrock', 'lmstudio', 'ollama', 'disabled'
                ]),
                help='Embedding provider for Cipher'
            ),
            click.option(
                '--cipher-embedding-key',
                help='API key for embedding provider (if required)'
            ),
            click.option(
                '--cipher-system-prompt',
                help='System prompt for coding assistant',
                default="You are a coding assistant with persistent memory capabilities. You can remember context across conversations and provide contextually aware assistance."
            ),
        ]
    
    def validate_requirements(self) -> Tuple[bool, Optional[str]]:
        """Validate Cipher requirements"""
        # Check for Python 3.11+
        major, minor = get_python_version()
        if major < 3 or (major == 3 and minor < 11):
            return False, "Cipher requires Python 3.11 or higher"
        
        # Check for Python 3
        if not check_command('python3'):
            return False, "Cipher requires Python 3.11+"
        
        # Check for uv (optional but recommended)
        if not check_command('uv'):
            logger.warning("UV package manager not found - install with: curl -LsSf https://astral.sh/uv/install.sh | sh")
        
        return True, None
    
    def generate_config_files(self, project_path: Path, config: Dict[str, Any]) -> None:
        """Generate Cipher configuration files"""
        # Get configuration values
        openai_key = config.get('cipher_openai_key', '')
        anthropic_key = config.get('cipher_anthropic_key', '')
        embedding_provider = config.get('cipher_embedding', '')
        embedding_key = config.get('cipher_embedding_key', '')
        system_prompt = config.get('cipher_system_prompt', 
            'You are a coding assistant with persistent memory capabilities. You can remember context across conversations and provide contextually aware assistance.')
        
        # Determine primary provider based on available API keys
        primary_provider = "openai"
        primary_model = "gpt-4-turbo"
        
        if anthropic_key:
            primary_provider = "anthropic"
            primary_model = "claude-3-5-sonnet-20241022"
        
        # Ensure memAgent directory exists
        mem_agent_dir = project_path / 'memAgent'
        ensure_directory(mem_agent_dir)
        
        # Generate Cipher configuration
        cipher_config = {
            'llm': {
                'provider': primary_provider,
                'model': primary_model,
                'apiKey': f'${self._get_env_var_name(primary_provider)}'
            },
            'systemPrompt': system_prompt
        }
        
        # Add embedding configuration if specified
        if embedding_provider and embedding_provider != 'disabled':
            embedding_config = self._get_embedding_config(embedding_provider, embedding_key)
            if embedding_config:
                cipher_config['embedding'] = embedding_config
        elif embedding_provider == 'disabled':
            cipher_config['embedding'] = {'disabled': True}
        
        # Write configuration file with comments
        config_file = mem_agent_dir / 'cipher.yml'
        
        with config_file.open('w') as f:
            f.write(f"# Cipher Configuration\n")
            f.write(f"# Generated by claude-mcp-init v0.11.1\n\n")
            
            # Write YAML content
            yaml.safe_dump(cipher_config, f, default_flow_style=False, sort_keys=False)
        
        logger.info(f"Created Cipher configuration: {config_file}")
        logger.info(f"âœ“ Configured for {primary_provider} provider with env-based API keys")
    
    def _get_env_var_name(self, provider: str) -> str:
        """Get environment variable name for provider"""
        if provider == "openai":
            return "OPENAI_API_KEY"
        elif provider == "anthropic":
            return "ANTHROPIC_API_KEY"
        else:
            return f"{provider.upper()}_API_KEY"
    
    def _get_embedding_config(self, provider: str, api_key: str = '') -> Optional[Dict[str, Any]]:
        """Get embedding configuration for provider"""
        configs = {
            'openai': {
                'type': 'openai',
                'model': 'text-embedding-3-small',
                'apiKey': '$OPENAI_API_KEY'
            },
            'azure-openai': {
                'type': 'openai',
                'model': 'text-embedding-3-small',
                'apiKey': '$AZURE_OPENAI_API_KEY',
                'baseUrl': '$AZURE_OPENAI_ENDPOINT'
            },
            'gemini': {
                'type': 'gemini',
                'model': 'text-embedding-004',
                'apiKey': '$GEMINI_API_KEY'
            },
            'voyage': {
                'type': 'voyage',
                'model': 'voyage-3-large',
                'apiKey': '$VOYAGE_API_KEY'
            },
            'qwen': {
                'type': 'qwen',
                'model': 'text-embedding-v3',
                'apiKey': '$QWEN_API_KEY',
                'dimensions': 1024
            },
            'aws-bedrock': {
                'type': 'aws-bedrock',
                'model': 'amazon.titan-embed-text-v2:0',
                'region': '$AWS_REGION',
                'accessKeyId': '$AWS_ACCESS_KEY_ID',
                'secretAccessKey': '$AWS_SECRET_ACCESS_KEY',
                'dimensions': 1024
            },
            'lmstudio': {
                'type': 'lmstudio',
                'model': 'nomic-embed-text-v1.5',
                'baseUrl': 'http://localhost:1234/v1'
            },
            'ollama': {
                'type': 'ollama',
                'model': 'nomic-embed-text',
                'baseUrl': 'http://localhost:11434'
            }
        }
        
        return configs.get(provider)
    
    def get_mcp_json_section(self, project_path: Path, config: Dict[str, Any]) -> Dict[str, Any]:
        """Return MCP server configuration for Cipher"""
        # Build environment variables
        env_vars = {}
        
        # Add API keys to environment
        openai_key = config.get('cipher_openai_key')
        if openai_key:
            env_vars['OPENAI_API_KEY'] = openai_key
        
        anthropic_key = config.get('cipher_anthropic_key')
        if anthropic_key:
            env_vars['ANTHROPIC_API_KEY'] = anthropic_key
        
        # Add embedding provider keys
        embedding_provider = config.get('cipher_embedding', '')
        embedding_key = config.get('cipher_embedding_key', '')
        
        if embedding_provider and embedding_key:
            env_var_map = {
                'azure-openai': 'AZURE_OPENAI_API_KEY',
                'gemini': 'GEMINI_API_KEY',
                'voyage': 'VOYAGE_API_KEY',
                'qwen': 'QWEN_API_KEY'
            }
            
            env_var_name = env_var_map.get(embedding_provider)
            if env_var_name:
                env_vars[env_var_name] = embedding_key
        
        return {
            "type": "stdio",
            "command": "cipher",
            "args": ["--mode", "mcp"],
            "env": env_vars
        }
    
    def get_env_variables(self, config: Dict[str, Any]) -> Dict[str, str]:
        """Return environment variables for Cipher"""
        env_vars = {}
        
        # Add primary API keys
        openai_key = config.get('cipher_openai_key')
        if openai_key:
            env_vars['OPENAI_API_KEY'] = openai_key
        
        anthropic_key = config.get('cipher_anthropic_key')
        if anthropic_key:
            env_vars['ANTHROPIC_API_KEY'] = anthropic_key
        
        # Add embedding provider keys
        embedding_provider = config.get('cipher_embedding', '')
        embedding_key = config.get('cipher_embedding_key', '')
        
        if embedding_provider and embedding_key:
            env_var_map = {
                'azure-openai': 'AZURE_OPENAI_API_KEY',
                'gemini': 'GEMINI_API_KEY',
                'voyage': 'VOYAGE_API_KEY',
                'qwen': 'QWEN_API_KEY'
            }
            
            env_var_name = env_var_map.get(embedding_provider)
            if env_var_name:
                env_vars[env_var_name] = embedding_key
        
        return env_vars
    
    def get_setup_instructions(self) -> List[str]:
        """Return setup instructions for Cipher"""
        return [
            "**Cipher Setup:**",
            "- Cipher requires Python 3.11+ and UV package manager",
            "- Install UV: `curl -LsSf https://astral.sh/uv/install.sh | sh`",
            "- API keys are managed via environment variables",
            "",
            "**Verify Installation:**",
            "```bash",
            "# Check Python version",
            "python3 --version  # Should be 3.11+",
            "",
            "# Check UV installation",
            "uv --version",
            "",
            "# Test Cipher installation (will install on first use)",
            "cipher --help",
            "```"
        ]
    
    def get_default_config(self) -> Dict[str, Any]:
        """Return default configuration for Cipher"""
        return {
            'provider': 'openai',
            'model': 'gpt-4-turbo',
            'embedding_provider': '',
            'system_prompt': 'You are a coding assistant with persistent memory capabilities. You can remember context across conversations and provide contextually aware assistance.'
        }
    
    def validate_config(self, config: Dict[str, Any]) -> Tuple[bool, Optional[str]]:
        """Validate Cipher configuration"""
        # Validate project name if provided
        project_name = config.get('project_name')
        if project_name and not validate_project_name(project_name):
            return False, f"Invalid project name: {project_name}"
        
        # Validate API keys if provided
        openai_key = config.get('cipher_openai_key')
        if openai_key and not validate_api_key(openai_key, 'openai'):
            return False, "Invalid OpenAI API key format"
        
        anthropic_key = config.get('cipher_anthropic_key')
        if anthropic_key and not validate_api_key(anthropic_key, 'anthropic'):
            return False, "Invalid Anthropic API key format"
        
        # Validate that at least one API key is provided
        if not openai_key and not anthropic_key:
            return False, "At least one API key (OpenAI or Anthropic) is required for Cipher"
        
        # Validate embedding provider key if needed
        embedding_provider = config.get('cipher_embedding', '')
        embedding_key = config.get('cipher_embedding_key', '')
        
        if embedding_provider in ['azure-openai', 'gemini', 'voyage', 'qwen'] and not embedding_key:
            return False, f"API key required for {embedding_provider} embedding provider"
        
        return True, None
    
    def pre_install_hook(self, project_path: Path, config: Dict[str, Any]) -> None:
        """Pre-installation hook for Cipher"""
        logger.debug("Cipher pre-install hook: Validating API keys")
        
        # Check if API keys are provided
        openai_key = config.get('cipher_openai_key')
        anthropic_key = config.get('cipher_anthropic_key')
        
        if not openai_key and not anthropic_key:
            logger.warning("No API keys provided. Cipher will require API keys to function.")
        
        # Validate embedding provider requirements
        embedding_provider = config.get('cipher_embedding', '')
        if embedding_provider and embedding_provider not in ['lmstudio', 'ollama', 'disabled']:
            embedding_key = config.get('cipher_embedding_key', '')
            if not embedding_key:
                logger.warning(f"Embedding provider {embedding_provider} may require an API key")
    
    def post_install_hook(self, project_path: Path, config: Dict[str, Any]) -> None:
        """Post-installation hook for Cipher"""
        logger.debug("Cipher post-install hook: Configuration complete")
        
        # Determine which provider was configured
        anthropic_key = config.get('cipher_anthropic_key')
        provider = "Anthropic" if anthropic_key else "OpenAI"
        
        logger.info(f"Cipher configured with {provider} provider")
        
        # Provide helpful tips
        embedding_provider = config.get('cipher_embedding', '')
        if embedding_provider:
            if embedding_provider in ['lmstudio', 'ollama']:
                logger.info(f"ðŸ’¡ Tip: Make sure {embedding_provider} is running locally")
            elif embedding_provider == 'disabled':
                logger.info("ðŸ’¡ Tip: Embedding disabled - memory features will be limited")
            else:
                logger.info(f"ðŸ’¡ Tip: Using {embedding_provider} for embeddings")
        else:
            logger.info("ðŸ’¡ Tip: Consider configuring an embedding provider for enhanced memory")