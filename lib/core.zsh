#!/usr/bin/env zsh

# Core Library for Claude MCP Init - Zsh Optimized
# Contains common functionality optimized specifically for Zsh

# Zsh optimizations
setopt EXTENDED_GLOB
setopt NULL_GLOB
setopt PIPE_FAIL

# Global configuration using Zsh associative arrays
typeset -r MCP_STARTER_VERSION="__VERSION__"  # Will be replaced during build
typeset -ra VALID_LANGUAGES=(csharp python rust java typescript javascript go cpp ruby)

# Enable Zsh colors
autoload -U colors && colors

# Enhanced color printing using Zsh features
print_header() {
    print -P "%F{blue}%B$1%b%f"
    print -P "%F{blue}$(printf '=%.0s' {1..${#1}})%f"
}

print_info() {
    print -P "%F{blue}$1%f"
}

print_success() {
    print -P "%F{green}$1%f"
}

print_warning() {
    print -P "%F{yellow}$1%f"
}

print_error() {
    print -P "%F{red}$1%f"
}

# Optimized prerequisite checking using Zsh features
check_prerequisites() {
    local -a missing_deps=()
    local -a required_commands=(node npm python3 uv)
    
    # Check for required commands using Zsh array operations
    for cmd in $required_commands; do
        command -v $cmd &>/dev/null || missing_deps+=($cmd)
    done
    
    if (( ${#missing_deps} > 0 )); then
        print_error "Error: Missing required dependencies: ${(j: :)missing_deps}"
        print_warning "Please install with: brew install ${(j: :)missing_deps}"
        print_warning "Or follow the installation guide in README.md"
        return 1
    fi
    
    return 0
}

# Enhanced language validation using Zsh features
validate_language() {
    local language="$1"
    
    # Use Zsh array membership test
    [[ ${VALID_LANGUAGES[(ie)$language]} -le ${#VALID_LANGUAGES} ]]
}

# Project structure creation with enhanced Zsh features
create_project_structure() {
    local project_name="$1"
    local in_place_mode="${2:-false}"
    local project_path
    
    if [[ "$in_place_mode" == "true" ]]; then
        # In-place mode: use current directory
        project_path="${PWD:A}"  # Zsh absolute path
        
        # Safety checks for in-place mode using Zsh globbing
        local existing_dirs=()
        [[ -d "${project_path}/.serena" ]] && existing_dirs+=(".serena/")
        [[ -d "${project_path}/memAgent" ]] && existing_dirs+=("memAgent/")
        
        if (( ${#existing_dirs} > 0 )); then
            print_warning "Warning: MCP configuration directories already exist in current directory" >&2
            for dir in $existing_dirs; do
                print_warning "  - $dir directory found" >&2
            done
            
            # Enhanced user input using Zsh vared
            local reply
            print -n "Do you want to continue and potentially overwrite existing configuration? (y/n): " >&2
            read -q reply
            print >&2
            [[ "$reply" != "y" ]] && { print_error "Aborted." >&2; return 1 }
        fi
        
        # Check if we're in a git repository using Zsh test
        [[ -d "${project_path}/.git" ]] && {
            print_info "Note: You're initializing MCP configuration in a git repository" >&2
            print_info "The configuration files will be created in the repository root" >&2
        }
        
        # Create MCP directories in current directory
        mkdir -p "${project_path}/.serena" "${project_path}/memAgent"
        
    else
        # Normal mode: create new project directory
        project_path="${PWD}/${project_name}"
        
        if [[ -d "$project_path" ]]; then
            print_warning "Warning: Project directory already exists: $project_path" >&2
            local reply
            print -n "Do you want to continue? (y/n): " >&2
            read -q reply
            print >&2
            [[ "$reply" != "y" ]] && { print_error "Aborted." >&2; return 1 }
        fi
        
        # Create project directories
        mkdir -p "$project_path" "${project_path}/.serena" "${project_path}/memAgent"
    fi
    
    print "$project_path"
    print "false"  # update_mode is always false for new project creation
    return 0
}

# Official Serena project.yml configuration (schema-compliant)
create_serena_config() {
    local project_path="$1"
    local language="$2"
    local project_name="${3:-${project_path:t}}"  # Zsh tail modifier
    local read_only="${4:-false}"
    local excluded_tools="${5:-}"
    local initial_prompt="${6:-}"
    local config_file="${project_path}/.serena/project.yml"
    
    # Validate C# projects require .sln file
    if [[ "$language" == "csharp" ]]; then
        if ! find "$project_path" -maxdepth 2 -name "*.sln" -type f | head -1 | grep -q .; then
            print_warning "Warning: C# projects require a .sln file in the project folder" >&2
        fi
    fi
    
    # Generate official Serena schema-compliant YAML
    cat > "$config_file" <<EOF
# language of the project (csharp, python, rust, java, typescript, javascript, go, cpp, or ruby)
# Generated by claude-mcp-init v${MCP_STARTER_VERSION}
language: ${language}

# whether to use the project's gitignore file to ignore files
ignore_all_files_in_gitignore: true

# list of additional paths to ignore
# same syntax as gitignore, so you can use * and **
ignored_paths: []

# whether the project is in read-only mode
# If set to true, all editing tools will be disabled
read_only: ${read_only}

# list of tool names to exclude
excluded_tools: [${excluded_tools}]

# initial prompt or context for the project
initial_prompt: "${initial_prompt}"

# name of the project
project_name: "${project_name}"
EOF
    
    print_success "Created Serena configuration: $config_file"
    print_info "✓ Using official Serena schema with gitignore integration"
}

# Cipher configuration with enhanced Zsh features
create_cipher_config() {
    local project_path="$1"
    shift  # Remove first argument to access CONFIG array
    local -A config_ref=("$@")  # Create local copy of CONFIG array
    local config_file="${project_path}/memAgent/cipher.yml"
    
    # Determine primary provider based on available API keys
    local primary_provider="openai"
    local primary_model="gpt-4-turbo"
    local primary_api_key="${config_ref[openai_key]:-your-openai-api-key-here}"
    
    if [[ -n "${config_ref[anthropic_key]}" && -z "${config_ref[openai_key]}" ]]; then
        primary_provider="anthropic"
        primary_model="claude-3-5-sonnet-20241022"
        primary_api_key="${config_ref[anthropic_key]:-your-anthropic-api-key-here}"
    fi
    
    cat > "$config_file" <<EOF
# Cipher Configuration
# Generated by claude-mcp-init v${MCP_STARTER_VERSION}

# LLM Configuration
llm:
  provider: ${primary_provider}
  model: ${primary_model}
  apiKey: ${primary_api_key}

# System prompt for coding assistant
systemPrompt: 'You are a coding assistant with persistent memory capabilities. You can remember context across conversations and provide contextually aware assistance.'

$(if [[ "${primary_provider}" == "anthropic" && -n "${config_ref[openai_key]}" ]]; then
    cat <<EOL
# Embedding configuration (required for Anthropic when using embeddings)
embedding:
  type: openai
  model: text-embedding-3-small
  apiKey: ${config_ref[openai_key]:-your-openai-api-key-here}
EOL
fi)
EOF
    
    print_success "Created Cipher configuration: $config_file"
    print_info "✓ Configured for ${primary_provider} provider with dynamic API key management"
    
    # Show configuration status
    if [[ "${primary_provider}" == "anthropic" ]]; then
        print_info "✓ Using Anthropic Claude for LLM operations"
    else
        print_info "✓ Using OpenAI GPT for LLM operations"
    fi
}

# Environment file creation with Zsh optimizations
create_env_file() {
    local project_path="$1"
    shift  # Remove first argument to access CONFIG array
    local -A config_ref=("$@")  # Create local copy of CONFIG array
    local env_file="${project_path}/.env"
    
    # Always overwrite .env file if it exists
    if [[ -f "$env_file" ]]; then
        print_info "Overwriting existing .env file..."
    fi
    
    # Dynamic API key handling
    local openai_key="${config_ref[openai_key]:-your-openai-api-key-here}"
    local anthropic_key="${config_ref[anthropic_key]:-your-anthropic-api-key-here}"
    local vector_store_key="${config_ref[vector_store_key]:-}"
    
    # Generate .env with dynamic values
    cat > "$env_file" <<EOF
# Environment Variables for MCP Servers
# Generated by claude-mcp-init v${MCP_STARTER_VERSION}

# OpenAI Configuration (Required for Cipher MCP)
OPENAI_API_KEY=${openai_key}

# Anthropic Configuration (Optional for Cipher MCP)
ANTHROPIC_API_KEY=${anthropic_key}

# Vector Store Configuration (Optional)
$(if [[ -n "$vector_store_key" ]]; then
    echo "VECTOR_STORE_API_KEY=${vector_store_key}"
else
    echo "# VECTOR_STORE_API_KEY=your-vector-store-api-key"
fi)

# MCP Server Configuration
MCP_SERVER_MODE=default

# Optional: Advanced Configuration
# LOG_LEVEL=info
# MEMORY_CACHE_SIZE=1000
# VECTOR_STORE_PATH=./vectors
# VECTOR_STORE_TYPE=local
EOF
    
    print_success "Created .env file: $env_file"
    
    # Show different messages based on provided keys
    if [[ "${config_ref[openai_key]}" != "" ]]; then
        print_info "✓ OpenAI API key has been configured"
    else
        print_warning "IMPORTANT: Please update the OPENAI_API_KEY in the .env file"
    fi
    
    if [[ "${config_ref[anthropic_key]}" != "" ]]; then
        print_info "✓ Anthropic API key has been configured"
    else
        print_info "Note: Anthropic API key can be optionally configured for additional LLM support"
    fi
}

# Generate .mcp.json configuration file for MCP servers
generate_mcp_json() {
    local project_path="$1"
    local language="$2"
    shift 2  # Remove first two arguments to access CONFIG array
    local -A config_ref=("$@")  # Create local copy of CONFIG array
    local mcp_file="${project_path}/.mcp.json"
    
    # Always overwrite .mcp.json file if it exists
    if [[ -f "$mcp_file" ]]; then
        print_info "Overwriting existing .mcp.json file..."
    fi
    
    # Get absolute project path for Serena configuration
    local abs_project_path="${project_path:A}"
    
    # Generate .mcp.json with proper formatting
    cat > "$mcp_file" <<EOF
{
  "mcpServers": {
    "serena": {
      "type": "stdio",
      "command": "uvx",
      "args": [
        "--from",
        "git+https://github.com/oraios/serena",
        "serena",
        "start-mcp-server",
        "--context",
        "ide-assistant",
        "--project",
        "${abs_project_path}"
      ],
      "env": {}
    },
    "cipher": {
      "type": "stdio",
      "command": "cipher",
      "args": ["--mode", "mcp"],
      "env": {$(if [[ -n "${config_ref[openai_key]}" ]]; then
    echo "        \"OPENAI_API_KEY\": \"${config_ref[openai_key]}\""
fi)$(if [[ -n "${config_ref[anthropic_key]}" ]]; then
    if [[ -n "${config_ref[openai_key]}" ]]; then echo ","; fi
    echo "        \"ANTHROPIC_API_KEY\": \"${config_ref[anthropic_key]}\""
fi)$(if [[ -n "${config_ref[vector_store_key]}" ]]; then
    if [[ -n "${config_ref[openai_key]}" || -n "${config_ref[anthropic_key]}" ]]; then echo ","; fi
    echo "        \"VECTOR_STORE_API_KEY\": \"${config_ref[vector_store_key]}\""
fi)
      }
    }
  }
}
EOF
    
    print_success "Generated .mcp.json configuration: $mcp_file"
    print_info "✓ Serena MCP server configured with project context: ${abs_project_path}"
    print_info "✓ Cipher MCP server configured with direct API key values in environment"
}

# Claude configuration generation with Zsh enhancements
generate_claude_config() {
    local project_path="$1"
    local language="$2"
    local config_file="${project_path}/claude-mcp-config.json"
    
    # Use Zsh parameter expansion for language flags
    local language_flag=""
    case "$language" in
        typescript|javascript) language_flag="--language=typescript" ;;
        python) language_flag="--language=python" ;;
        *) language_flag="--language=${language}" ;;
    esac
    
    # Generate JSON using Zsh here-document
    cat > "$config_file" <<EOF
{
  "mcpServers": {
    "serena": {
      "command": "npx",
      "args": [
        "-y",
        "@oraios/serena",
        "start",
        "--config=${project_path}/.serena/project.yml",
        "${language_flag}"
      ],
      "env": {
        "NODE_ENV": "production"
      }
    },
    "cipher": {
      "command": "uv",
      "args": [
        "run",
        "--with",
        "cipher-mcp",
        "cipher",
        "--config=${project_path}/memAgent/cipher.yml"
      ],
      "env": {
        "PYTHONPATH": "${project_path}/memAgent",
        "OPENAI_API_KEY": "\${OPENAI_API_KEY}"
      }
    }
  }
}
EOF
    
    print_success "Generated Claude Code MCP configuration: $config_file"
}

# Setup instructions with Zsh optimizations
create_setup_instructions() {
    local project_path="$1"
    local shell_type="$2"
    local instructions_file="${project_path}/MCP_SETUP_INSTRUCTIONS.md"
    
    cat > "$instructions_file" <<EOF
# MCP Server Setup Instructions

Generated by claude-mcp-init v${MCP_STARTER_VERSION}
Detected shell: zsh (optimized)

## Prerequisites Checklist

1. **Environment Variables**
   - [ ] Update API keys in \`.env\` file (if not provided during setup)
   - [ ] Verify \`OPENAI_API_KEY\` is set (required for Cipher)
   - [ ] Optionally set \`ANTHROPIC_API_KEY\` for alternative LLM support

2. **Install Dependencies**
   - [ ] UV package manager: \`curl -LsSf https://astral.sh/uv/install.sh | sh\`
   - [ ] Cipher MCP server: \`uv add cipher-mcp\`

3. **MCP Configuration**
   - [ ] Use generated \`.mcp.json\` file with Claude Code or compatible MCP clients
   - [ ] Or manually configure your MCP client with the settings

## Quick Start

### 1. Set up Environment
\`\`\`zsh
# Source environment variables (automatically configured during setup)
source .env

# Verify API keys are set
echo \$OPENAI_API_KEY
echo \$ANTHROPIC_API_KEY
\`\`\`

### 2. Install MCP Dependencies
\`\`\`zsh
# Install UV (Python package manager) if not already installed
curl -LsSf https://astral.sh/uv/install.sh | sh

# Install Cipher MCP server
uv add cipher-mcp

# Note: Serena will be automatically installed via uvx when first used
\`\`\`

### 3. Configure Your MCP Client
Use the generated \`.mcp.json\` file with your MCP client:

**For Claude Code:**
- Copy or merge \`.mcp.json\` settings into your Claude Code MCP configuration

**For Cursor:**
- Copy \`.mcp.json\` to \`.cursor/mcp.json\` (global) or project root (project-specific)

**For other MCP clients:**
- Use the server configurations from \`.mcp.json\`

### 4. Test the Setup
\`\`\`zsh
# Test Serena MCP server (will auto-install via uvx)
uvx --from git+https://github.com/oraios/serena serena start-mcp-server --help

# Test Cipher MCP server
cipher --mode mcp --help

# Verify environment variables
echo "OpenAI Key set: \${OPENAI_API_KEY:+YES}"
echo "Anthropic Key set: \${ANTHROPIC_API_KEY:+YES}"
\`\`\`

## Configuration Files

- **\`.mcp.json\`** - Universal MCP server configuration for all compatible clients
- **\`.serena/project.yml\`** - Serena semantic code analysis configuration (official schema)
- **\`memAgent/cipher.yml\`** - Cipher persistent memory configuration
- **\`.env\`** - Environment variables (API keys and server settings)

## Troubleshooting

### Common Issues

1. **API Key Not Set**
   - Ensure \`OPENAI_API_KEY\` and/or \`ANTHROPIC_API_KEY\` are properly set in \`.env\`
   - Verify keys have sufficient credits and permissions
   - Use \`--openai-key\` or \`--anthropic-key\` options during setup for automatic configuration

2. **Dependencies Missing**
   - Install UV package manager: \`curl -LsSf https://astral.sh/uv/install.sh | sh\`
   - Install Cipher: \`uv add cipher-mcp\`
   - Serena installs automatically via uvx on first use

3. **MCP Configuration Issues**
   - Ensure \`.mcp.json\` is properly formatted
   - Check that absolute paths are correct in the configuration
   - Verify environment variables are accessible to your MCP client

3. **Permission Issues**
   - Ensure scripts have execute permissions: \`chmod +x *.sh\`

## Additional Resources

- [Serena Documentation](https://github.com/oraios/serena)
- [Cipher Documentation](https://github.com/campfirein/cipher)
- [Claude Code MCP Docs](https://docs.anthropic.com/claude-code/mcp)
- [Claude MCP Init Repository](https://github.com/yourusername/claude-mcp-init)
EOF
    
    print_success "Created setup instructions: $instructions_file"
}

# Version display with Zsh formatting
show_version() {
    print -P "%F{blue}%Bclaude-mcp-init%b version %F{green}${MCP_STARTER_VERSION}%f"
    print -P "%F{blue}Zsh-optimized MCP server configuration tool%f"
}

# Enhanced help with Zsh formatting
show_help() {
    cat <<EOF
$(print -P "%F{blue}%Bclaude-mcp-init%b - Zsh-optimized MCP server configuration tool%f")

$(print -P "%F{blue}%BUSAGE:%b%f")
    claude-mcp-init [OPTIONS] <PROJECT_NAME> [LANGUAGE]

$(print -P "%F{blue}%BARGUMENTS:%b%f")
    <PROJECT_NAME>    Name of the project (used in configuration files)
    [LANGUAGE]        Programming language (default: typescript)

$(print -P "%F{blue}%BOPTIONS:%b%f")
    -n, --in-place        Initialize in current directory instead of creating new project folder
    --openai-key KEY      Set OpenAI API key for Cipher MCP server
    --anthropic-key KEY   Set Anthropic API key for Cipher MCP server
    --vector-store-key KEY Set vector store API key (optional)
    --interactive-keys    Interactive API key setup mode
    --generate-mcp-only   Generate only .mcp.json in existing project
    -h, --help            Show this help message
    -v, --version         Show version information
    --shell               Show detected shell information

$(print -P "%F{blue}%BSUPPORTED LANGUAGES:%b%f")
    ${(j: :)VALID_LANGUAGES}

$(print -P "%F{blue}%BEXAMPLES:%b%f")
    # Create new project directory
    claude-mcp-init my-project typescript
    claude-mcp-init python-app python
    
    # Initialize in current directory
    cd existing-project
    claude-mcp-init -n my-project typescript
    claude-mcp-init --in-place rust-project rust
    
    # With API keys
    claude-mcp-init --openai-key sk-xxx my-project typescript
    claude-mcp-init --anthropic-key claude-xxx --openai-key sk-xxx my-project python
    
    # Interactive key setup
    claude-mcp-init --interactive-keys my-project typescript
    
    # Generate only .mcp.json in existing project
    claude-mcp-init --generate-mcp-only --openai-key sk-xxx existing-project

$(print -P "%F{blue}%BNOTES:%b%f")
    - Normal mode creates a new directory: ./PROJECT_NAME/
    - In-place mode (-n) creates configuration in current directory
    - In-place mode will warn if .serena/ or memAgent/ already exist
    - Project name is always required for configuration files
    - Optimized for Zsh with enhanced performance and features

For more information, visit: https://github.com/yourusername/claude-mcp-init
EOF
}

# Shell information display
show_shell_info() {
    print -P "%F{blue}%BShell Information:%b%f"
    print -P "%F{green}Detected shell: zsh (optimized)%f"
    print -P "%F{blue}Version: ${ZSH_VERSION}%f"
    print -P "%F{blue}Features: Extended globbing, associative arrays, enhanced completion%f"
}