#!/usr/bin/env zsh

# Core Library for Claude MCP Init - Zsh Optimized
# Contains common functionality optimized specifically for Zsh

# Zsh optimizations
setopt EXTENDED_GLOB
setopt NULL_GLOB
setopt PIPE_FAIL

# Global configuration using Zsh associative arrays
typeset -r MCP_STARTER_VERSION="__VERSION__"  # Will be replaced during build
typeset -ra VALID_LANGUAGES=(typescript javascript python java go rust php elixir clojure c cpp)

# Enable Zsh colors
autoload -U colors && colors

# Enhanced color printing using Zsh features
print_header() {
    print -P "%F{blue}%B$1%b%f"
    print -P "%F{blue}$(printf '=%.0s' {1..${#1}})%f"
}

print_info() {
    print -P "%F{blue}$1%f"
}

print_success() {
    print -P "%F{green}$1%f"
}

print_warning() {
    print -P "%F{yellow}$1%f"
}

print_error() {
    print -P "%F{red}$1%f"
}

# Optimized prerequisite checking using Zsh features
check_prerequisites() {
    local -a missing_deps=()
    local -a required_commands=(node npm python3 uv)
    
    # Check for required commands using Zsh array operations
    for cmd in $required_commands; do
        command -v $cmd &>/dev/null || missing_deps+=($cmd)
    done
    
    if (( ${#missing_deps} > 0 )); then
        print_error "Error: Missing required dependencies: ${(j: :)missing_deps}"
        print_warning "Please install with: brew install ${(j: :)missing_deps}"
        print_warning "Or follow the installation guide in README.md"
        return 1
    fi
    
    return 0
}

# Enhanced language validation using Zsh features
validate_language() {
    local language="$1"
    
    # Use Zsh array membership test
    [[ ${VALID_LANGUAGES[(ie)$language]} -le ${#VALID_LANGUAGES} ]]
}

# Project structure creation with enhanced Zsh features
create_project_structure() {
    local project_name="$1"
    local in_place_mode="${2:-false}"
    local project_path
    
    if [[ "$in_place_mode" == "true" ]]; then
        # In-place mode: use current directory
        project_path="${PWD:A}"  # Zsh absolute path
        
        # Safety checks for in-place mode using Zsh globbing
        local existing_dirs=()
        [[ -d "${project_path}/.serena" ]] && existing_dirs+=(".serena/")
        [[ -d "${project_path}/memAgent" ]] && existing_dirs+=("memAgent/")
        
        if (( ${#existing_dirs} > 0 )); then
            print_warning "Warning: MCP configuration directories already exist in current directory" >&2
            for dir in $existing_dirs; do
                print_warning "  - $dir directory found" >&2
            done
            
            # Enhanced user input using Zsh vared
            local reply
            print -n "Do you want to continue and potentially overwrite existing configuration? (y/n): " >&2
            read -q reply
            print >&2
            [[ "$reply" != "y" ]] && { print_error "Aborted." >&2; return 1 }
        fi
        
        # Check if we're in a git repository using Zsh test
        [[ -d "${project_path}/.git" ]] && {
            print_info "Note: You're initializing MCP configuration in a git repository" >&2
            print_info "The configuration files will be created in the repository root" >&2
        }
        
        # Create MCP directories in current directory
        mkdir -p "${project_path}/.serena" "${project_path}/memAgent"
        
    else
        # Normal mode: create new project directory
        project_path="${PWD}/${project_name}"
        
        if [[ -d "$project_path" ]]; then
            print_warning "Warning: Project directory already exists: $project_path" >&2
            local reply
            print -n "Do you want to continue? (y/n): " >&2
            read -q reply
            print >&2
            [[ "$reply" != "y" ]] && { print_error "Aborted." >&2; return 1 }
        fi
        
        # Create project directories
        mkdir -p "$project_path" "${project_path}/.serena" "${project_path}/memAgent"
    fi
    
    print "$project_path"
    return 0
}

# Enhanced Serena configuration with Zsh here-documents
create_serena_config() {
    local project_path="$1"
    local language="$2"
    local project_name="${3:-${project_path:t}}"  # Zsh tail modifier
    local config_file="${project_path}/.serena/project.yml"
    
    # Use Zsh here-document with parameter expansion
    cat > "$config_file" <<EOF
# Serena Project Configuration
# Generated by claude-mcp-init v${MCP_STARTER_VERSION}

name: ${project_name}
language: ${language}
version: __VERSION__

# Project settings
settings:
  read_only: false
  auto_save: true
  
# Language-specific configuration
languages:
  primary: ${language}
  secondary: []

# File patterns to include
include:
  - "**/*.${language#typescript}${language#javascript}js"
  - "**/*.ts"
  - "**/*.py"
  - "**/*.go"
  - "**/*.rs"
  - "**/*.java"
  - "**/*.php"
  - "**/*.ex"
  - "**/*.clj"
  - "**/*.c"
  - "**/*.cpp"
  - "**/*.h"
  - "**/*.hpp"

# File patterns to exclude  
exclude:
  - "**/node_modules/**"
  - "**/dist/**"
  - "**/build/**"
  - "**/.git/**"
  - "**/__pycache__/**"
  - "**/target/**"

# Default context
default_context: claude-code
default_modes:
  - interactive
  - editing

# Project metadata
metadata:
  created_at: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
  created_by: claude-mcp-init
  version: ${MCP_STARTER_VERSION}
EOF
    
    print_success "Created Serena configuration: $config_file"
}

# Cipher configuration with enhanced Zsh features
create_cipher_config() {
    local project_path="$1"
    local config_file="${project_path}/memAgent/cipher.yml"
    
    cat > "$config_file" <<'EOF'
# Cipher Memory Agent Configuration
# Generated by claude-mcp-init

# LLM Configuration
llm:
  provider: openai
  model: gpt-4-turbo
  apiKey: $OPENAI_API_KEY
  temperature: 0.7
  maxTokens: 4096
  timeout: 30000

# Memory Configuration
memory:
  # Vector store settings
  vectorStore:
    provider: local
    dimensions: 1536
    similarity: cosine
    
  # Embedding settings
  embeddings:
    provider: openai
    model: text-embedding-3-small
    batchSize: 100
    
  # Memory persistence
  persistence:
    enabled: true
    path: ./memory
    autoSave: true
    saveInterval: 300

# Context Management
context:
  # Maximum context window
  maxTokens: 16000
  
  # Context retention strategy
  retention:
    strategy: sliding_window
    windowSize: 8000
    overlap: 1000
    
  # Memory recall settings
  recall:
    enabled: true
    threshold: 0.7
    maxResults: 10

# Monitoring and Logging
monitoring:
  enabled: true
  logLevel: info
  metricsPort: 3001

# Advanced Features
features:
  # Auto-summarization
  autoSummarization:
    enabled: true
    threshold: 4000
    
  # Context compression
  compression:
    enabled: true
    algorithm: gzip
    
  # Memory indexing
  indexing:
    enabled: true
    updateInterval: 60
EOF
    
    print_success "Created Cipher configuration: $config_file"
}

# Environment file creation with Zsh optimizations
create_env_file() {
    local project_path="$1"
    local env_file="${project_path}/.env"
    
    [[ -f "$env_file" ]] && {
        print_warning "Warning: .env file already exists"
        return 0
    }
    
    cat > "$env_file" <<'EOF'
# Environment Variables for MCP Servers
# Generated by claude-mcp-init

# OpenAI Configuration (Required for Cipher)
OPENAI_API_KEY=your-openai-api-key-here

# Optional: Additional API Keys
# ANTHROPIC_API_KEY=your-anthropic-api-key
# VOYAGE_API_KEY=your-voyage-api-key

# Optional: Advanced Configuration
# LOG_LEVEL=info
# MEMORY_CACHE_SIZE=1000
# VECTOR_STORE_PATH=./vectors
EOF
    
    print_success "Created .env file: $env_file"
    print_warning "IMPORTANT: Please update the OPENAI_API_KEY in the .env file"
}

# Claude configuration generation with Zsh enhancements
generate_claude_config() {
    local project_path="$1"
    local language="$2"
    local config_file="${project_path}/claude-mcp-config.json"
    
    # Use Zsh parameter expansion for language flags
    local language_flag=""
    case "$language" in
        typescript|javascript) language_flag="--language=typescript" ;;
        python) language_flag="--language=python" ;;
        *) language_flag="--language=${language}" ;;
    esac
    
    # Generate JSON using Zsh here-document
    cat > "$config_file" <<EOF
{
  "mcpServers": {
    "serena": {
      "command": "npx",
      "args": [
        "-y",
        "@oraios/serena",
        "start",
        "--config=${project_path}/.serena/project.yml",
        "${language_flag}"
      ],
      "env": {
        "NODE_ENV": "production"
      }
    },
    "cipher": {
      "command": "uv",
      "args": [
        "run",
        "--with",
        "cipher-mcp",
        "cipher",
        "--config=${project_path}/memAgent/cipher.yml"
      ],
      "env": {
        "PYTHONPATH": "${project_path}/memAgent",
        "OPENAI_API_KEY": "\${OPENAI_API_KEY}"
      }
    }
  }
}
EOF
    
    print_success "Generated Claude Code MCP configuration: $config_file"
}

# Setup instructions with Zsh optimizations
create_setup_instructions() {
    local project_path="$1"
    local shell_type="$2"
    local instructions_file="${project_path}/MCP_SETUP_INSTRUCTIONS.md"
    
    cat > "$instructions_file" <<EOF
# MCP Server Setup Instructions

Generated by claude-mcp-init v${MCP_STARTER_VERSION}
Detected shell: zsh (optimized)

## Prerequisites Checklist

1. **Environment Variables**
   - [ ] Update \`OPENAI_API_KEY\` in \`.env\` file

2. **Install Dependencies**
   - [ ] Serena: \`npm install -g @oraios/serena\`
   - [ ] Cipher: \`uv add cipher-mcp\`

3. **Claude Code Configuration**
   - [ ] Copy \`claude-mcp-config.json\` to Claude Code settings
   - [ ] Or merge with existing MCP configuration

## Quick Start

### 1. Set up Environment
\`\`\`zsh
# Edit the .env file with your OpenAI API key
export OPENAI_API_KEY="your-actual-api-key-here"
source .env
\`\`\`

### 2. Install MCP Servers
\`\`\`zsh
# Install Serena (global installation recommended)
npm install -g @oraios/serena

# Install Cipher using uv
uv add cipher-mcp
\`\`\`

### 3. Configure Claude Code
Copy the generated \`claude-mcp-config.json\` to your Claude Code MCP settings, or merge it with your existing configuration.

### 4. Test the Setup
\`\`\`zsh
# Test Serena
npx @oraios/serena start --config=.serena/project.yml --test

# Test Cipher  
uv run --with cipher-mcp cipher --config=memAgent/cipher.yml --test
\`\`\`

## Configuration Files

- **\`.serena/project.yml\`** - Serena semantic code analysis configuration
- **\`memAgent/cipher.yml\`** - Cipher persistent memory configuration
- **\`.env\`** - Environment variables (including API keys)
- **\`claude-mcp-config.json\`** - Claude Code MCP server configuration

## Troubleshooting

### Common Issues

1. **API Key Not Set**
   - Ensure \`OPENAI_API_KEY\` is properly set in \`.env\`
   - Verify the key has sufficient credits and permissions

2. **Dependencies Missing**
   - Install Node.js: \`brew install node\`
   - Install Python with uv: \`brew install uv\`

3. **Permission Issues**
   - Ensure scripts have execute permissions: \`chmod +x *.sh\`

## Additional Resources

- [Serena Documentation](https://github.com/oraios/serena)
- [Cipher Documentation](https://github.com/campfirein/cipher)
- [Claude Code MCP Docs](https://docs.anthropic.com/claude-code/mcp)
- [Claude MCP Init Repository](https://github.com/yourusername/claude-mcp-init)
EOF
    
    print_success "Created setup instructions: $instructions_file"
}

# Version display with Zsh formatting
show_version() {
    print -P "%F{blue}%Bclaude-mcp-init%b version %F{green}${MCP_STARTER_VERSION}%f"
    print -P "%F{blue}Zsh-optimized MCP server configuration tool%f"
}

# Enhanced help with Zsh formatting
show_help() {
    cat <<EOF
$(print -P "%F{blue}%Bclaude-mcp-init%b - Zsh-optimized MCP server configuration tool%f")

$(print -P "%F{blue}%BUSAGE:%b%f")
    claude-mcp-init [OPTIONS] <PROJECT_NAME> [LANGUAGE]

$(print -P "%F{blue}%BARGUMENTS:%b%f")
    <PROJECT_NAME>    Name of the project (used in configuration files)
    [LANGUAGE]        Programming language (default: typescript)

$(print -P "%F{blue}%BOPTIONS:%b%f")
    -n, --in-place    Initialize in current directory instead of creating new project folder
    -h, --help        Show this help message
    -v, --version     Show version information
    --shell           Show detected shell information

$(print -P "%F{blue}%BSUPPORTED LANGUAGES:%b%f")
    ${(j: :)VALID_LANGUAGES}

$(print -P "%F{blue}%BEXAMPLES:%b%f")
    # Create new project directory
    claude-mcp-init my-project typescript
    claude-mcp-init python-app python
    
    # Initialize in current directory
    cd existing-project
    claude-mcp-init -n my-project typescript
    claude-mcp-init --in-place rust-project rust

$(print -P "%F{blue}%BNOTES:%b%f")
    - Normal mode creates a new directory: ./PROJECT_NAME/
    - In-place mode (-n) creates configuration in current directory
    - In-place mode will warn if .serena/ or memAgent/ already exist
    - Project name is always required for configuration files
    - Optimized for Zsh with enhanced performance and features

For more information, visit: https://github.com/yourusername/claude-mcp-init
EOF
}

# Shell information display
show_shell_info() {
    print -P "%F{blue}%BShell Information:%b%f"
    print -P "%F{green}Detected shell: zsh (optimized)%f"
    print -P "%F{blue}Version: ${ZSH_VERSION}%f"
    print -P "%F{blue}Features: Extended globbing, associative arrays, enhanced completion%f"
}