name: Release and Publish

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true
        type: string

env:
  REGISTRY: ghcr.io

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"

      - name: Install dependencies for testing
        run: |
          # Install required tools for testing
          sudo apt-get update
          sudo apt-get install -y shellcheck zsh

          # Install Node.js and Python (simulating Homebrew dependencies)
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs

          # Install Python and uv
          sudo apt-get install -y python3 python3-pip
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          
          # Install Python dependencies for testing
          pip3 install -r requirements.txt

      - name: Lint shell scripts
        run: |
          find bin lib -name "*.zsh" -exec shellcheck {} \;
          
      - name: Lint Python code
        run: |
          # Lint Python code with flake8
          flake8 lib/claude_mcp_init/ lib/mcp_modules/ test/python/ --max-line-length=100 --ignore=E501,W503

      - name: Run Formula tests
        run: |
          ruby test/formula_test.rb

      - name: Build unified binary
        run: |
          make build

      - name: Run Python unit tests
        run: |
          # Run Python unit tests with pytest
          python3 -m pytest test/python/unit/ -v --tb=short
          
      - name: Run Python integration tests
        run: |
          # Run Python integration tests
          python3 -m pytest test/python/integration/ -v --tb=short
          
      - name: Run Zsh integration tests
        run: |
          # Run Zsh backend tests
          TEST_BACKEND=zsh bash test/integration_test.sh
          
      - name: Run Python backend integration tests
        run: |
          # Run Python backend tests  
          TEST_BACKEND=python bash test/integration_test.sh

  build-and-release:
    name: Build and Create Release
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="v${VERSION}"
          else
            if [ "${{ github.ref_type }}" = "tag" ]; then
              TAG="${{ github.ref_name }}"        # 例: v1.2.3
              VERSION="${TAG#v}"                  # 例: 1.2.3
            else
              echo "This run is not a tag push (ref_type=${{ github.ref_type }}, ref_name=${{ github.ref_name }})" >&2
              exit 1
            fi
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Update VERSION file
        run: |
          echo "${{ steps.version.outputs.version }}" > VERSION
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install build dependencies
        run: |
          # Install Node.js, Python, uv, and zsh for building
          sudo apt-get update
          sudo apt-get install -y zsh
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          sudo apt-get install -y python3 python3-pip
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Build distribution
        run: |
          make dist

      - name: Update Formula SHA256
        run: |
          make update-formula

      - name: Commit version changes
        run: |
          git add VERSION Formula/claude-mcp-init.rb
          git commit -m "Release ${{ steps.version.outputs.tag }}" || exit 0
          if git rev-parse -q --verify "refs/tags/${{ steps.version.outputs.tag }}" >/dev/null; then
            echo "Tag exists; skipping creation"
          else
            git tag "${{ steps.version.outputs.tag }}"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            dist/claude-mcp-init-${{ steps.version.outputs.version }}.tar.gz
          body: |
            ## Claude MCP Init ${{ steps.version.outputs.version }}

            Multi-shell MCP server configuration tool for Claude Code.

            ### Installation

            **Homebrew (Recommended):**
            ```bash
            brew tap sho7650/homebrew-claude-mcp-init
            brew install claude-mcp-init
            ```

            **Manual Installation:**
            1. Download the tarball from this release
            2. Extract: `tar -xzf claude-mcp-init-${{ steps.version.outputs.version }}.tar.gz`
            3. Copy `bin/claude-mcp-init` to your PATH

            ### Usage

            ```bash
            claude-mcp-init my-project typescript
            claude-mcp-init python-app python
            ```

            ### What's New

            See the full changelog below for all changes in this release.

            ### Requirements

            - Node.js and npm
            - Python 3.11+
            - uv package manager
            - OpenAI API key

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push changes
        run: |
          git push origin main
          git push origin "${{ steps.version.outputs.tag }}"

  notify:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: build-and-release
    if: always()

    steps:
      - name: Notify success
        if: needs.build-and-release.result == 'success'
        run: |
          echo "✅ Release completed successfully!"
          echo "Users can now install with: brew install sho7650/homebrew-claude-mcp-init/claude-mcp-init"

      - name: Notify failure
        if: needs.build-and-release.result == 'failure'
        run: |
          echo "❌ Release failed. Please check the logs and try again."
          exit 1
