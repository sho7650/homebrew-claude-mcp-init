name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Python Lint and Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python linting tools
        run: |
          pip install flake8 black isort mypy
          pip install -r requirements.txt

      - name: Run Python linting
        run: |
          echo "Running Python linting..."
          flake8 lib/claude_mcp_init/ --max-line-length=100 --ignore=E203,W503
          echo "✅ Python linting completed"

      - name: Check Python formatting
        run: |
          echo "Checking Python code formatting..."
          black --check lib/claude_mcp_init/
          isort --check-only lib/claude_mcp_init/
          echo "✅ Python formatting check completed"

      - name: Run type checking
        run: |
          echo "Running type checking..."
          mypy lib/claude_mcp_init/ --ignore-missing-imports
          echo "✅ Type checking completed"

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          
          # Install Node.js and Python dependencies
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs

          # Install uv for Python package management
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install node uv

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Verify dependencies
        run: |
          echo "Node.js version: $(node --version)"
          echo "Python version: $(python --version)"
          echo "UV version: $(uv --version)"

      - name: Run Python unit tests
        run: |
          echo "Running Python unit tests..."
          cd test/python && python -m pytest unit/ -v --cov=claude_mcp_init

      - name: Run Python integration tests
        run: |
          echo "Running Python integration tests..."
          cd test/python && python -m pytest integration/ -v

      - name: Run Formula tests
        run: |
          echo "Running Formula tests..."
          ruby test/formula_test.rb

      - name: Build project
        run: |
          echo "Building Python-only project..."
          make build

      - name: Test built executable
        run: |
          echo "Testing built executable..."
          build/bin/claude-mcp-init --version
          build/bin/claude-mcp-init --help | head -5

      - name: Test installation
        run: |
          echo "Testing local development installation..."
          make dev-install
          ls -la ~/dev/bin/
          ls -la ~/dev/lib/
          ~/dev/bin/claude-mcp-init --version
          ~/dev/bin/claude-mcp-init --help | head -5

      - name: Test binary functionality
        run: |
          echo "Testing binary functionality..."
          make test-binary

      - name: Clean up
        run: |
          make dev-clean
          make clean

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          # Install Node.js and Python dependencies
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Build distribution
        run: |
          make dist

      - name: Test distribution tarball
        run: |
          # Extract and test the distribution
          cd /tmp
          tar -xzf $GITHUB_WORKSPACE/dist/claude-mcp-init-*.tar.gz

          # Verify Python-only structure
          test -f bin/claude-mcp-init
          test -d lib/claude_mcp_init
          test -d lib/mcp_modules
          test -f lib/claude_mcp_init/__init__.py
          test -f lib/claude_mcp_init/main.py
          test -f lib/mcp_modules/cipher/plugin.py
          test -f lib/mcp_modules/serena/plugin.py

          # Test the extracted executable
          chmod +x bin/claude-mcp-init
          export PYTHONPATH="./lib:$PYTHONPATH"
          ./bin/claude-mcp-init --version

          echo "✅ Distribution tarball is valid"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: claude-mcp-init-dist
          path: dist/
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          pip install bandit safety

      - name: Run Python security scan
        run: |
          echo "Running Python security checks..."
          
          # Run bandit security scan for Python code
          bandit -r lib/claude_mcp_init/ -f json -o bandit-report.json || true
          bandit -r lib/claude_mcp_init/ --severity-level medium

          # Check Python dependencies for known vulnerabilities
          safety check --json --output safety-report.json || true
          safety check

          echo "✅ Python security scan completed"

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for hardcoded secrets..."
          
          # Check for OpenAI API keys
          if grep -rEn "sk-proj-[A-Za-z0-9]{20,}|sk-[A-Za-z0-9]{40,}" . --exclude-dir=.git 2>/dev/null | grep -v "sk-fake"; then
            echo "❌ Potential hardcoded OpenAI secrets found"
            exit 1
          else
            echo "✅ No hardcoded OpenAI secrets detected"
          fi

          # Check for Anthropic API keys
          if grep -rEn "anthropic-[A-Za-z0-9]{40,}|claude-[A-Za-z0-9]{40,}" . --exclude-dir=.git 2>/dev/null; then
            echo "❌ Potential hardcoded Anthropic secrets found"
            exit 1
          else
            echo "✅ No hardcoded Anthropic secrets detected"
          fi

      - name: Check file permissions
        run: |
          echo "Checking file permissions..."

          # Ensure scripts are not world-writable
          if find . -type f -perm /o+w | grep -v ".git"; then
            echo "❌ World-writable files found"
            exit 1
          else
            echo "✅ File permissions are secure"
          fi

  python-compatibility:
    name: Python Compatibility Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          pip install -r requirements.txt

      - name: Test with Python ${{ matrix.python-version }}
        run: |
          echo "Testing with Python ${{ matrix.python-version }}..."
          make build
          build/bin/claude-mcp-init --version
          echo "✅ Python ${{ matrix.python-version }} compatibility confirmed"

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation completeness
        run: |
          echo "Checking documentation..."

          # Check required files exist
          test -f README.md || (echo "❌ README.md missing"; exit 1)
          test -f CLAUDE.md || (echo "❌ CLAUDE.md missing"; exit 1)

          # Check README has required sections
          grep -q "Installation" README.md || (echo "❌ README missing Installation section"; exit 1)
          grep -q "Usage" README.md || (echo "❌ README missing Usage section"; exit 1)
          grep -q "Examples" README.md || (echo "❌ README missing Examples section"; exit 1)

          echo "✅ Documentation check passed"

      - name: Check for Python-only documentation
        run: |
          echo "Verifying Python-only documentation..."
          
          # Ensure no references to old Zsh architecture
          if grep -r "zsh\|shell" README.md docs/ | grep -v "fish\|nushell\|powershell"; then
            echo "⚠️ Found potential references to old Zsh architecture"
          fi

          # Check for Python-specific documentation
          grep -q "Python" README.md || echo "⚠️ README should mention Python requirements"
          
          echo "✅ Python-only documentation check completed"

      - name: Check links in documentation
        run: |
          echo "Checking documentation links..."

          # Basic link validation
          if grep -r "http" *.md docs/ | grep -v "example.com\|yourusername\|github.com"; then
            echo "⚠️ Found placeholder URLs in documentation"
          fi

          echo "✅ Link check completed"