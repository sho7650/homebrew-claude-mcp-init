name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install shellcheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck

      - name: Lint shell scripts
        run: |
          echo "Linting shell scripts..."
          find bin lib -name "*.sh" -exec shellcheck {} \;
          echo "✅ Shell script linting completed"

      - name: Check shell script formatting
        run: |
          if command -v shfmt >/dev/null 2>&1; then
            echo "Checking shell script formatting..."
            find bin lib -name "*.sh" -exec shfmt -d -i 4 -ci {} \;
          else
            echo "⚠️ shfmt not available, skipping format check"
          fi

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        shell: [bash, zsh]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          
          # Install Node.js and Python
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          sudo apt-get install -y python3 python3-pip
          
          # Install uv
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install node python@3.11 uv shellcheck

      - name: Verify dependencies
        run: |
          echo "Node.js version: $(node --version)"
          echo "Python version: $(python3 --version)"
          echo "UV version: $(uv --version)"
          echo "Shell: ${{ matrix.shell }}"

      - name: Run Formula tests
        run: |
          echo "Running Formula tests..."
          ruby test/formula_test.rb

      - name: Build project
        run: |
          echo "Building project..."
          make build

      - name: Run integration tests
        run: |
          echo "Running integration tests with ${{ matrix.shell }}..."
          if [ "${{ matrix.shell }}" = "zsh" ]; then
            zsh -c "bash test/integration_test.sh"
          else
            bash test/integration_test.sh
          fi

      - name: Test installation
        run: |
          echo "Testing local installation..."
          make dev-install
          ~/bin/mcp-starter --version
          ~/bin/mcp-starter --help | head -5

      - name: Clean up
        run: |
          make dev-clean
          make clean

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          # Install Node.js, Python, and uv for building
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          sudo apt-get install -y python3 python3-pip
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Build distribution
        run: |
          make dist

      - name: Test distribution tarball
        run: |
          # Extract and test the distribution
          cd /tmp
          tar -xzf $GITHUB_WORKSPACE/dist/mcp-starter-*.tar.gz
          
          # Verify structure
          ls -la
          test -f bin/mcp-starter
          test -d lib/mcp-starter
          
          echo "✅ Distribution tarball is valid"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mcp-starter-dist
          path: dist/
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        run: |
          echo "Running security checks..."
          
          # Check for common security issues in shell scripts
          if command -v bandit >/dev/null 2>&1; then
            echo "Running bandit security scan..."
            # Note: bandit is for Python, but we can adapt this for shell
          fi
          
          # Check for hardcoded secrets
          echo "Checking for potential secrets..."
          if grep -r -i "password\|secret\|key\|token" --exclude-dir=.git . | grep -v "placeholder\|example\|your-.*-key-here"; then
            echo "❌ Potential hardcoded secrets found"
            exit 1
          else
            echo "✅ No hardcoded secrets detected"
          fi

      - name: Check file permissions
        run: |
          echo "Checking file permissions..."
          
          # Ensure scripts are not world-writable
          if find . -type f -perm /o+w | grep -v ".git"; then
            echo "❌ World-writable files found"
            exit 1
          else
            echo "✅ File permissions are secure"
          fi

  compatibility:
    name: Shell Compatibility Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shell: [bash, zsh, dash]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install shell
        run: |
          sudo apt-get update
          case "${{ matrix.shell }}" in
            "zsh")
              sudo apt-get install -y zsh
              ;;
            "dash")
              sudo apt-get install -y dash
              ;;
          esac

      - name: Install dependencies
        run: |
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs python3 python3-pip
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Test with shell
        run: |
          make build
          
          # Test basic functionality with different shells
          case "${{ matrix.shell }}" in
            "bash")
              bash -c "build/bin/mcp-starter --version"
              ;;
            "zsh")
              zsh -c "build/bin/mcp-starter --version"
              ;;
            "dash")
              dash -c "build/bin/mcp-starter --version" || echo "⚠️ dash compatibility limited"
              ;;
          esac

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation completeness
        run: |
          echo "Checking documentation..."
          
          # Check required files exist
          test -f README.md || (echo "❌ README.md missing"; exit 1)
          test -f CLAUDE.md || (echo "❌ CLAUDE.md missing"; exit 1)
          test -f homebrew-design.md || (echo "❌ homebrew-design.md missing"; exit 1)
          
          # Check README has required sections
          grep -q "Installation" README.md || (echo "❌ README missing Installation section"; exit 1)
          grep -q "Usage" README.md || (echo "❌ README missing Usage section"; exit 1)
          grep -q "Examples" README.md || (echo "❌ README missing Examples section"; exit 1)
          
          echo "✅ Documentation check passed"

      - name: Check links in documentation
        run: |
          echo "Checking documentation links..."
          
          # Basic link validation (can be enhanced with tools like markdown-link-check)
          if grep -r "http" *.md | grep -v "example.com\|yourusername"; then
            echo "⚠️ Found placeholder URLs in documentation"
          fi
          
          echo "✅ Link check completed"